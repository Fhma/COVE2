Min_number = ( 0 ) ; Max_number = ( 15 )
In original model number_of_states = ( 23 ); number_of_transition = ( 46 ) 

Original Transition
0 --- 1  -> (x)
0 --- 4  -> ((-1)*x+1)
1 --- 21  -> (z11)/(z11+z12)
1 --- 22  -> (z12)/(z11+z12)
2 --- 19  -> (z21)/(z21+z22)
2 --- 20  -> (z22)/(z21+z22)
3 --- 17  -> (z31)/(z31+z32)
3 --- 18  -> (z32)/(z31+z32)
4 --- 15  -> (z41)/(z41+z42)
4 --- 16  -> (z42)/(z41+z42)
5 --- 13  -> (z51)/(z51+z52)
5 --- 14  -> (z52)/(z51+z52)
6 --- 11  -> (z61)/(z61+z62)
6 --- 12  -> (z62)/(z61+z62)
7 --- 1  -> (y2)
7 --- 3  -> ((-1)*y1-y2+1)
7 --- 5  -> (y1)
8 --- 0  -> (z2)
8 --- 4  -> ((-1)*z1-z2+1)
8 --- 5  -> (z1)
9 --- 9  -> (1)
10 --- 0  -> (1)
11 --- 9  -> ((-1)*p61+1)
11 --- 10  -> (p61)
12 --- 9  -> ((-1)*p62+1)
12 --- 10  -> (p62)
13 --- 6  -> (p51)
13 --- 9  -> ((-1)*p51+1)
14 --- 6  -> (p52)
14 --- 9  -> ((-1)*p52+1)
15 --- 8  -> (p41)
15 --- 9  -> ((-1)*p41+1)
16 --- 8  -> (p42)
16 --- 9  -> ((-1)*p42+1)
17 --- 6  -> (p31)
17 --- 9  -> ((-1)*p31+1)
18 --- 6  -> (p32)
18 --- 9  -> ((-1)*p32+1)
19 --- 7  -> (p21)
19 --- 9  -> ((-1)*p21+1)
20 --- 7  -> (p22)
20 --- 9  -> ((-1)*p22+1)
21 --- 2  -> (p11)
21 --- 9  -> ((-1)*p11+1)
22 --- 2  -> (p12)
22 --- 9  -> ((-1)*p12+1)


In New Model number of states = ( 29 ); number of transition = ( 52 ) 

New transition
0 --- 1  -> (x)
0 --- 4  -> ((-1)*x+1)
1 --- 21  -> (z11)/(z11+z12)
1 --- 22  -> (z12)/(z11+z12)
2 --- 19  -> (z21)/(z21+z22)
2 --- 20  -> (z22)/(z21+z22)
3 --- 17  -> (z31)/(z31+z32)
3 --- 18  -> (z32)/(z31+z32)
4 --- 15  -> (z41)/(z41+z42)
4 --- 16  -> (z42)/(z41+z42)
5 --- 13  -> (z51)/(z51+z52)
5 --- 14  -> (z52)/(z51+z52)
6 --- 11  -> (z61)/(z61+z62)
6 --- 12  -> (z62)/(z61+z62)
7 --- 1  -> (y2)
7 --- 3  -> ((-1)*y1-y2+1)
7 --- 5  -> (y1)
8 --- 0  -> (z2)
8 --- 4  -> ((-1)*z1-z2+1)
8 --- 5  -> (z1)
9 --- 9  -> (1)
10 --- 0  -> (1)
11 --- 9  -> ((-1)*p61+1)
11 --- 10  -> (p61)
12 --- 9  -> ((-1)*p62+1)
12 --- 10  -> (p62)
13 --- 6  -> (p51)
13 --- 9  -> ((-1)*p51+1)
14 --- 6  -> (p52)
14 --- 9  -> ((-1)*p52+1)
15 --- 8  -> (p41)
16 --- 8  -> (p42)
17 --- 6  -> (p31)
17 --- 9  -> ((-1)*p31+1)
18 --- 6  -> (p32)
18 --- 9  -> ((-1)*p32+1)
19 --- 7  -> (p21)
20 --- 7  -> (p22)
21 --- 2  -> (p11)
22 --- 2  -> (p12)
15 --- 23  -> ((-1)*p41+1)
23 --- 9  -> 1
16 --- 24  -> ((-1)*p42+1)
24 --- 9  -> 1
19 --- 25  -> ((-1)*p21+1)
25 --- 9  -> 1
20 --- 26  -> ((-1)*p22+1)
26 --- 9  -> 1
21 --- 27  -> ((-1)*p11+1)
27 --- 9  -> 1
22 --- 28  -> ((-1)*p12+1)
28 --- 9  -> 1


State--Fragment Number--visited--startingPoint--endingPoint
   0          1          true        true          false
   1          1          true        false          false
   2          1          true        false          false
   3          1          true        false          true
   4          1          true        false          false
   5          1          true        false          true
   6          2          true        true          false
   7          1          true        false          false
   8          1          true        false          false
   9          7          true        true          true
   10          8          true        true          true
   11          2          true        false          true
   12          2          true        false          true
   13          3          true        true          true
   14          4          true        true          true
   15          1          true        false          false
   16          1          true        false          false
   17          5          true        true          true
   18          6          true        true          true
   19          1          true        false          false
   20          1          true        false          false
   21          1          true        false          false
   22          1          true        false          false
   23          1          true        false          true
   24          1          true        false          true
   25          1          true        false          true
   26          1          true        false          true
   27          1          true        false          true
   28          1          true        false          true

This is transition in Fragment (1) 
    [0, 1]  (x)
    [0, 4]  ((-1)*x+1)
    [1, 21]  (z11)/(z11+z12)
    [1, 22]  (z12)/(z11+z12)
    [2, 19]  (z21)/(z21+z22)
    [2, 20]  (z22)/(z21+z22)
    [4, 15]  (z41)/(z41+z42)
    [4, 16]  (z42)/(z41+z42)
    [7, 1]  (y2)
    [7, 3]  ((-1)*y1-y2+1)
    [7, 5]  (y1)
    [8, 0]  (z2)
    [8, 4]  ((-1)*z1-z2+1)
    [8, 5]  (z1)
    [15, 8]  (p41)
    [16, 8]  (p42)
    [19, 7]  (p21)
    [20, 7]  (p22)
    [21, 2]  (p11)
    [22, 2]  (p12)
    [15, 23]  ((-1)*p41+1)
    [16, 24]  ((-1)*p42+1)
    [19, 25]  ((-1)*p21+1)
    [20, 26]  ((-1)*p22+1)
    [21, 27]  ((-1)*p11+1)
    [22, 28]  ((-1)*p12+1)
    [3, 3]  1
    [5, 5]  1
    [23, 23]  1
    [24, 24]  1
    [25, 25]  1
    [26, 26]  1
    [27, 27]  1
    [28, 28]  1

This is transition in Fragment (2) 
    [6, 11]  (z61)/(z61+z62)
    [6, 12]  (z62)/(z61+z62)
    [11, 11]  1
    [12, 12]  1

This is transition in Fragment (3) 
    [13, 13]  1

This is transition in Fragment (4) 
    [14, 14]  1

This is transition in Fragment (5) 
    [17, 17]  1

This is transition in Fragment (6) 
    [18, 18]  1

This is transition in Fragment (7) 
    [9, 9]  1

This is transition in Fragment (8) 
    [10, 10]  1

This is transition for abstract model 
    [3, 17]  ( (z31)/(z31+z32) ) * ( prob_f1_s3 )
    [3, 18]  ( (z32)/(z31+z32) ) * ( prob_f1_s3 )
    [5, 13]  ( (z51)/(z51+z52) ) * ( prob_f1_s5 )
    [5, 14]  ( (z52)/(z51+z52) ) * ( prob_f1_s5 )
    [9, 9]  (1)
    [10, 0]  (1)
    [11, 9]  ( ((-1)*p61+1) ) * ( prob_f2_s11 )
    [11, 10]  ( (p61) ) * ( prob_f2_s11 )
    [12, 9]  ( ((-1)*p62+1) ) * ( prob_f2_s12 )
    [12, 10]  ( (p62) ) * ( prob_f2_s12 )
    [13, 6]  (p51)
    [13, 9]  ((-1)*p51+1)
    [14, 6]  (p52)
    [14, 9]  ((-1)*p52+1)
    [17, 6]  (p31)
    [17, 9]  ((-1)*p31+1)
    [18, 6]  (p32)
    [18, 9]  ((-1)*p32+1)
    [23, 9]  ( 1 ) * ( prob_f1_s23 )
    [24, 9]  ( 1 ) * ( prob_f1_s24 )
    [25, 9]  ( 1 ) * ( prob_f1_s25 )
    [26, 9]  ( 1 ) * ( prob_f1_s26 )
    [27, 9]  ( 1 ) * ( prob_f1_s27 )
    [28, 9]  ( 1 ) * ( prob_f1_s28 )
P1_0_1 = ((x)); 
P1_0_2 = (((-1)*x+1)); 
P1_1_3 = ((z11)/(z11+z12)); 
P1_1_4 = ((z12)/(z11+z12)); 
P1_2_5 = ((z21)/(z21+z22)); 
P1_2_6 = ((z22)/(z21+z22)); 
P1_4_7 = ((z41)/(z41+z42)); 
P1_4_8 = ((z42)/(z41+z42)); 
P1_7_9 = ((y2)); 
P1_7_10 = (((-1)*y1-y2+1)); 
P1_7_11 = ((y1)); 
P1_8_12 = ((z2)); 
P1_8_13 = (((-1)*z1-z2+1)); 
P1_8_14 = ((z1)); 
P1_15_15 = ((p41)); 
P1_15_21 = (((-1)*p41+1)); 
P1_16_16 = ((p42)); 
P1_16_22 = (((-1)*p42+1)); 
P1_19_17 = ((p21)); 
P1_19_23 = (((-1)*p21+1)); 
P1_20_18 = ((p22)); 
P1_20_24 = (((-1)*p22+1)); 
P1_21_19 = ((p11)); 
P1_21_25 = (((-1)*p11+1)); 
P1_22_20 = ((p12)); 
P1_22_26 = (((-1)*p12+1)); 

prob_f1_s3 =( (-1 * (P1_0_1*P1_1_4*P1_4_8*P1_22_20*P1_16_16*P1_2_6*P1_8_13*P1_20_18*P1_7_10+P1_0_1*P1_1_3*P1_4_8*P1_21_19*P1_16_16*P1_2_6*P1_8_13*P1_20_18*P1_7_10+P1_0_1*P1_1_3*P1_4_8*P1_21_19*P1_16_16*P1_2_5*P1_8_13*P1_19_17*P1_7_10+P1_0_1*P1_1_4*P1_4_7*P1_22_20*P1_15_15*P1_2_5*P1_8_13*P1_19_17*P1_7_10+P1_0_1*P1_1_3*P1_4_7*P1_21_19*P1_15_15*P1_2_5*P1_8_13*P1_19_17*P1_7_10+P1_0_1*P1_1_3*P1_4_7*P1_21_19*P1_15_15*P1_2_6*P1_8_13*P1_20_18*P1_7_10+P1_0_1*P1_1_4*P1_4_7*P1_22_20*P1_15_15*P1_2_6*P1_8_13*P1_20_18*P1_7_10+P1_0_1*P1_1_4*P1_4_8*P1_22_20*P1_16_16*P1_2_5*P1_8_13*P1_19_17*P1_7_10+(-1)*P1_0_1*P1_1_4*P1_22_20*P1_2_6*P1_20_18*P1_7_10+(-1)*P1_0_1*P1_1_3*P1_21_19*P1_2_6*P1_20_18*P1_7_10+(-1)*P1_0_1*P1_1_4*P1_22_20*P1_2_5*P1_19_17*P1_7_10+(-1)*P1_0_1*P1_1_3*P1_21_19*P1_2_5*P1_19_17*P1_7_10))/((P1_0_2*P1_4_8*P1_16_16*P1_8_12+P1_4_8*P1_16_16*P1_8_13+P1_0_2*P1_4_7*P1_15_15*P1_8_12+P1_4_7*P1_15_15*P1_8_13+(-1)) * (P1_1_4*P1_22_20*P1_2_6*P1_20_18*P1_7_9+P1_1_3*P1_21_19*P1_2_6*P1_20_18*P1_7_9+P1_1_4*P1_22_20*P1_2_5*P1_19_17*P1_7_9+P1_1_3*P1_21_19*P1_2_5*P1_19_17*P1_7_9+(-1)))); 
prob_f1_s5 =( (-1 * (P1_0_2*P1_1_4*P1_4_8*P1_22_20*P1_16_16*P1_2_6*P1_8_14*P1_20_18*P1_7_9+(-1)*P1_0_2*P1_4_7*P1_15_15*P1_8_14+(-1)*P1_0_1*P1_1_3*P1_21_19*P1_2_5*P1_19_17*P1_7_11+(-1)*P1_0_1*P1_1_3*P1_21_19*P1_2_6*P1_20_18*P1_7_11+(-1)*P1_0_1*P1_1_4*P1_22_20*P1_2_6*P1_20_18*P1_7_11+P1_0_1*P1_1_4*P1_4_8*P1_22_20*P1_16_16*P1_2_5*P1_8_13*P1_19_17*P1_7_11+P1_0_1*P1_1_3*P1_4_8*P1_21_19*P1_16_16*P1_2_5*P1_8_13*P1_19_17*P1_7_11+P1_0_1*P1_1_3*P1_4_8*P1_21_19*P1_16_16*P1_2_6*P1_8_13*P1_20_18*P1_7_11+P1_0_1*P1_1_4*P1_4_8*P1_22_20*P1_16_16*P1_2_6*P1_8_13*P1_20_18*P1_7_11+P1_0_2*P1_1_4*P1_4_7*P1_22_20*P1_15_15*P1_2_5*P1_8_14*P1_19_17*P1_7_9+P1_0_2*P1_1_3*P1_4_7*P1_21_19*P1_15_15*P1_2_5*P1_8_14*P1_19_17*P1_7_9+P1_0_2*P1_1_4*P1_4_7*P1_22_20*P1_15_15*P1_2_6*P1_8_14*P1_20_18*P1_7_9+(-1)*P1_0_2*P1_4_8*P1_16_16*P1_8_14+P1_0_1*P1_1_4*P1_4_7*P1_22_20*P1_15_15*P1_2_5*P1_8_13*P1_19_17*P1_7_11+P1_0_1*P1_1_3*P1_4_7*P1_21_19*P1_15_15*P1_2_5*P1_8_13*P1_19_17*P1_7_11+P1_0_1*P1_1_3*P1_4_7*P1_21_19*P1_15_15*P1_2_6*P1_8_13*P1_20_18*P1_7_11+P1_0_1*P1_1_4*P1_4_7*P1_22_20*P1_15_15*P1_2_6*P1_8_13*P1_20_18*P1_7_11+P1_0_2*P1_1_3*P1_4_8*P1_21_19*P1_16_16*P1_2_6*P1_8_14*P1_20_18*P1_7_9+P1_0_2*P1_1_4*P1_4_8*P1_22_20*P1_16_16*P1_2_5*P1_8_14*P1_19_17*P1_7_9+P1_0_2*P1_1_3*P1_4_8*P1_21_19*P1_16_16*P1_2_5*P1_8_14*P1_19_17*P1_7_9+(-1)*P1_0_1*P1_1_4*P1_22_20*P1_2_5*P1_19_17*P1_7_11+P1_0_2*P1_1_3*P1_4_7*P1_21_19*P1_15_15*P1_2_6*P1_8_14*P1_20_18*P1_7_9))/((P1_0_2*P1_4_8*P1_16_16*P1_8_12+P1_4_8*P1_16_16*P1_8_13+P1_0_2*P1_4_7*P1_15_15*P1_8_12+P1_4_7*P1_15_15*P1_8_13+(-1)) * (P1_1_4*P1_22_20*P1_2_6*P1_20_18*P1_7_9+P1_1_3*P1_21_19*P1_2_6*P1_20_18*P1_7_9+P1_1_4*P1_22_20*P1_2_5*P1_19_17*P1_7_9+P1_1_3*P1_21_19*P1_2_5*P1_19_17*P1_7_9+(-1)))); 
prob_f1_s23 =( (-1 * (P1_0_2*P1_4_7*P1_15_21))/(P1_0_2*P1_4_8*P1_16_16*P1_8_12+P1_0_2*P1_4_7*P1_15_15*P1_8_12+P1_4_8*P1_16_16*P1_8_13+P1_4_7*P1_15_15*P1_8_13+(-1))); 
prob_f1_s24 =( (-1 * (P1_0_2*P1_4_8*P1_16_22))/(P1_0_2*P1_4_8*P1_16_16*P1_8_12+P1_4_8*P1_16_16*P1_8_13+P1_0_2*P1_4_7*P1_15_15*P1_8_12+P1_4_7*P1_15_15*P1_8_13+(-1))); 
prob_f1_s25 =( (-1 * (P1_0_1*P1_1_4*P1_4_8*P1_22_20*P1_16_16*P1_2_5*P1_8_13*P1_19_23+P1_0_1*P1_1_3*P1_4_7*P1_21_19*P1_15_15*P1_2_5*P1_8_13*P1_19_23+P1_0_1*P1_1_4*P1_4_7*P1_22_20*P1_15_15*P1_2_5*P1_8_13*P1_19_23+P1_0_1*P1_1_3*P1_4_8*P1_21_19*P1_16_16*P1_2_5*P1_8_13*P1_19_23+(-1)*P1_0_1*P1_1_3*P1_21_19*P1_2_5*P1_19_23+(-1)*P1_0_1*P1_1_4*P1_22_20*P1_2_5*P1_19_23))/((P1_0_2*P1_4_8*P1_16_16*P1_8_12+P1_4_8*P1_16_16*P1_8_13+P1_0_2*P1_4_7*P1_15_15*P1_8_12+P1_4_7*P1_15_15*P1_8_13+(-1)) * (P1_1_4*P1_22_20*P1_2_6*P1_20_18*P1_7_9+P1_1_4*P1_22_20*P1_2_5*P1_19_17*P1_7_9+P1_1_3*P1_21_19*P1_2_6*P1_20_18*P1_7_9+P1_1_3*P1_21_19*P1_2_5*P1_19_17*P1_7_9+(-1)))); 
prob_f1_s26 =( (-1 * (P1_0_1*P1_1_4*P1_4_8*P1_22_20*P1_16_16*P1_2_6*P1_8_13*P1_20_24+P1_0_1*P1_1_3*P1_4_7*P1_21_19*P1_15_15*P1_2_6*P1_8_13*P1_20_24+P1_0_1*P1_1_4*P1_4_7*P1_22_20*P1_15_15*P1_2_6*P1_8_13*P1_20_24+P1_0_1*P1_1_3*P1_4_8*P1_21_19*P1_16_16*P1_2_6*P1_8_13*P1_20_24+(-1)*P1_0_1*P1_1_3*P1_21_19*P1_2_6*P1_20_24+(-1)*P1_0_1*P1_1_4*P1_22_20*P1_2_6*P1_20_24))/((P1_0_2*P1_4_8*P1_16_16*P1_8_12+P1_4_8*P1_16_16*P1_8_13+P1_0_2*P1_4_7*P1_15_15*P1_8_12+P1_4_7*P1_15_15*P1_8_13+(-1)) * (P1_1_4*P1_22_20*P1_2_6*P1_20_18*P1_7_9+P1_1_3*P1_21_19*P1_2_6*P1_20_18*P1_7_9+P1_1_4*P1_22_20*P1_2_5*P1_19_17*P1_7_9+P1_1_3*P1_21_19*P1_2_5*P1_19_17*P1_7_9+(-1)))); 
prob_f1_s27 =( (-1 * (P1_0_1*P1_1_3*P1_4_8*P1_21_25*P1_16_16*P1_8_13+(-1)*P1_0_1*P1_1_3*P1_21_25+P1_0_1*P1_1_3*P1_4_7*P1_21_25*P1_15_15*P1_8_13))/((P1_0_2*P1_4_8*P1_16_16*P1_8_12+P1_4_8*P1_16_16*P1_8_13+P1_0_2*P1_4_7*P1_15_15*P1_8_12+P1_4_7*P1_15_15*P1_8_13+(-1)) * (P1_1_4*P1_22_20*P1_2_6*P1_20_18*P1_7_9+P1_1_4*P1_22_20*P1_2_5*P1_19_17*P1_7_9+P1_1_3*P1_21_19*P1_2_6*P1_20_18*P1_7_9+P1_1_3*P1_21_19*P1_2_5*P1_19_17*P1_7_9+(-1)))); 
prob_f1_s28 =( (-1 * (P1_0_1*P1_1_4*P1_4_8*P1_22_26*P1_16_16*P1_8_13+(-1)*P1_0_1*P1_1_4*P1_22_26+P1_0_1*P1_1_4*P1_4_7*P1_22_26*P1_15_15*P1_8_13))/((P1_0_2*P1_4_8*P1_16_16*P1_8_12+P1_4_8*P1_16_16*P1_8_13+P1_0_2*P1_4_7*P1_15_15*P1_8_12+P1_4_7*P1_15_15*P1_8_13+(-1)) * (P1_1_4*P1_22_20*P1_2_6*P1_20_18*P1_7_9+P1_1_3*P1_21_19*P1_2_6*P1_20_18*P1_7_9+P1_1_4*P1_22_20*P1_2_5*P1_19_17*P1_7_9+P1_1_3*P1_21_19*P1_2_5*P1_19_17*P1_7_9+(-1)))); 
P2_6_1 = ((z61)/(z61+z62)); 
P2_6_2 = ((z62)/(z61+z62)); 

prob_f2_s11 =( (P2_6_1)/(1)); 
prob_f2_s12 =( (P2_6_2)/(1)); 
PX_0_1 = (( (z31)/(z31+z32) ) * ( prob_f1_s3 )); 
PX_0_2 = (( (z32)/(z31+z32) ) * ( prob_f1_s3 ));
PX_0_3 = (( (z51)/(z51+z52) ) * ( prob_f1_s5 ));
PX_0_4 = (( (z52)/(z51+z52) ) * ( prob_f1_s5 ));
PX_0_17 = (     ( 1 ) * ( prob_f1_s23 ) + ( 1 ) * ( prob_f1_s24 )  + ( 1 ) * ( prob_f1_s25 )  + ( 1 ) * ( prob_f1_s26 )  + ( 1 ) * ( prob_f1_s27 )  + ( 1 ) * ( prob_f1_s28 ) );
PX_1_7 = ( ( ((-1)*p61+1) ) * ( prob_f2_s11 ) + ( ((-1)*p62+1) ) * ( prob_f2_s12 ) ); 
PX_1_8 = ( ( (p61) ) * ( prob_f2_s11 ) + ( (p62) ) * ( prob_f2_s12 ) );
PX_2_9 = ((p51)); 
PX_2_10 = (((-1)*p51+1));
PX_3_11 = ((p52)); 
PX_3_12 = (((-1)*p52+1));
PX_4_13 = ((p31)); 
PX_4_14 = (((-1)*p31+1));
PX_5_15 = ((p32)); 
PX_5_16 = (((-1)*p32+1));
PX_6_5 = ((1)); 
PX_7_6 = ((1)); 

Output_abstract_model =( (PX_0_4*PX_3_11*PX_1_8+PX_0_1*PX_4_13*PX_1_8+PX_0_2*PX_5_15*PX_1_8+PX_0_3*PX_2_9*PX_1_8)/(1)); 
