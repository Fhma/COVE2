Min_number = ( 0 ) ; Max_number = ( 5 )
In original model number_of_states = ( 41 ); number_of_transition = ( 100 ) 

Original Transition
0 --- 1  -> (x)
0 --- 4  -> ((-1)*x+1)
1 --- 36  -> (z11)/(z11+z12+z13+z14+z15)
1 --- 37  -> (z12)/(z11+z12+z13+z14+z15)
1 --- 38  -> (z13)/(z11+z12+z13+z14+z15)
1 --- 39  -> (z14)/(z11+z12+z13+z14+z15)
1 --- 40  -> (z15)/(z11+z12+z13+z14+z15)
2 --- 31  -> (z21)/(z21+z22+z23+z24+z25)
2 --- 32  -> (z22)/(z21+z22+z23+z24+z25)
2 --- 33  -> (z23)/(z21+z22+z23+z24+z25)
2 --- 34  -> (z24)/(z21+z22+z23+z24+z25)
2 --- 35  -> (z25)/(z21+z22+z23+z24+z25)
3 --- 26  -> (z31)/(z31+z32+z33+z34+z35)
3 --- 27  -> (z32)/(z31+z32+z33+z34+z35)
3 --- 28  -> (z33)/(z31+z32+z33+z34+z35)
3 --- 29  -> (z34)/(z31+z32+z33+z34+z35)
3 --- 30  -> (z35)/(z31+z32+z33+z34+z35)
4 --- 21  -> (z41)/(z41+z42+z43+z44+z45)
4 --- 22  -> (z42)/(z41+z42+z43+z44+z45)
4 --- 23  -> (z43)/(z41+z42+z43+z44+z45)
4 --- 24  -> (z44)/(z41+z42+z43+z44+z45)
4 --- 25  -> (z45)/(z41+z42+z43+z44+z45)
5 --- 16  -> (z51)/(z51+z52+z53+z54+z55)
5 --- 17  -> (z52)/(z51+z52+z53+z54+z55)
5 --- 18  -> (z53)/(z51+z52+z53+z54+z55)
5 --- 19  -> (z54)/(z51+z52+z53+z54+z55)
5 --- 20  -> (z55)/(z51+z52+z53+z54+z55)
6 --- 11  -> (z61)/(z61+z62+z63+z64+z65)
6 --- 12  -> (z62)/(z61+z62+z63+z64+z65)
6 --- 13  -> (z63)/(z61+z62+z63+z64+z65)
6 --- 14  -> (z64)/(z61+z62+z63+z64+z65)
6 --- 15  -> (z65)/(z61+z62+z63+z64+z65)
7 --- 1  -> (y2)
7 --- 3  -> ((-1)*y1-y2+1)
7 --- 5  -> (y1)
8 --- 0  -> (z2)
8 --- 4  -> ((-1)*z1-z2+1)
8 --- 5  -> (z1)
9 --- 9  -> (1)
10 --- 0  -> (1)
11 --- 9  -> ((-1)*p61+1)
11 --- 10  -> (p61)
12 --- 9  -> ((-1)*p62+1)
12 --- 10  -> (p62)
13 --- 9  -> ((-1)*p63+1)
13 --- 10  -> (p63)
14 --- 9  -> ((-1)*p64+1)
14 --- 10  -> (p64)
15 --- 9  -> ((-1)*p65+1)
15 --- 10  -> (p65)
16 --- 6  -> (p51)
16 --- 9  -> ((-1)*p51+1)
17 --- 6  -> (p52)
17 --- 9  -> ((-1)*p52+1)
18 --- 6  -> (p53)
18 --- 9  -> ((-1)*p53+1)
19 --- 6  -> (p54)
19 --- 9  -> ((-1)*p54+1)
20 --- 6  -> (p55)
20 --- 9  -> ((-1)*p55+1)
21 --- 8  -> (p41)
21 --- 9  -> ((-1)*p41+1)
22 --- 8  -> (p42)
22 --- 9  -> ((-1)*p42+1)
23 --- 8  -> (p43)
23 --- 9  -> ((-1)*p43+1)
24 --- 8  -> (p44)
24 --- 9  -> ((-1)*p44+1)
25 --- 8  -> (p45)
25 --- 9  -> ((-1)*p45+1)
26 --- 6  -> (p31)
26 --- 9  -> ((-1)*p31+1)
27 --- 6  -> (p32)
27 --- 9  -> ((-1)*p32+1)
28 --- 6  -> (p33)
28 --- 9  -> ((-1)*p33+1)
29 --- 6  -> (p34)
29 --- 9  -> ((-1)*p34+1)
30 --- 6  -> (p35)
30 --- 9  -> ((-1)*p35+1)
31 --- 7  -> (p21)
31 --- 9  -> ((-1)*p21+1)
32 --- 7  -> (p22)
32 --- 9  -> ((-1)*p22+1)
33 --- 7  -> (p23)
33 --- 9  -> ((-1)*p23+1)
34 --- 7  -> (p24)
34 --- 9  -> ((-1)*p24+1)
35 --- 7  -> (p25)
35 --- 9  -> ((-1)*p25+1)
36 --- 2  -> (p11)
36 --- 9  -> ((-1)*p11+1)
37 --- 2  -> (p12)
37 --- 9  -> ((-1)*p12+1)
38 --- 2  -> (p13)
38 --- 9  -> ((-1)*p13+1)
39 --- 2  -> (p14)
39 --- 9  -> ((-1)*p14+1)
40 --- 2  -> (p15)
40 --- 9  -> ((-1)*p15+1)


In New Model number of states = ( 57 ); number of transition = ( 118 ) 

New transition
0 --- 1  -> (x)
0 --- 4  -> ((-1)*x+1)
1 --- 36  -> (z11)/(z11+z12+z13+z14+z15)
1 --- 37  -> (z12)/(z11+z12+z13+z14+z15)
1 --- 38  -> (z13)/(z11+z12+z13+z14+z15)
1 --- 39  -> (z14)/(z11+z12+z13+z14+z15)
1 --- 40  -> (z15)/(z11+z12+z13+z14+z15)
2 --- 31  -> (z21)/(z21+z22+z23+z24+z25)
2 --- 32  -> (z22)/(z21+z22+z23+z24+z25)
2 --- 33  -> (z23)/(z21+z22+z23+z24+z25)
2 --- 34  -> (z24)/(z21+z22+z23+z24+z25)
2 --- 35  -> (z25)/(z21+z22+z23+z24+z25)
3 --- 26  -> (z31)/(z31+z32+z33+z34+z35)
3 --- 27  -> (z32)/(z31+z32+z33+z34+z35)
3 --- 28  -> (z33)/(z31+z32+z33+z34+z35)
3 --- 29  -> (z34)/(z31+z32+z33+z34+z35)
3 --- 30  -> (z35)/(z31+z32+z33+z34+z35)
6 --- 11  -> (z61)/(z61+z62+z63+z64+z65)
6 --- 12  -> (z62)/(z61+z62+z63+z64+z65)
6 --- 13  -> (z63)/(z61+z62+z63+z64+z65)
6 --- 14  -> (z64)/(z61+z62+z63+z64+z65)
6 --- 15  -> (z65)/(z61+z62+z63+z64+z65)
7 --- 1  -> (y2)
7 --- 3  -> ((-1)*y1-y2+1)
7 --- 5  -> (y1)
9 --- 9  -> (1)
10 --- 0  -> (1)
11 --- 9  -> ((-1)*p61+1)
11 --- 10  -> (p61)
12 --- 9  -> ((-1)*p62+1)
12 --- 10  -> (p62)
13 --- 9  -> ((-1)*p63+1)
13 --- 10  -> (p63)
14 --- 9  -> ((-1)*p64+1)
14 --- 10  -> (p64)
15 --- 9  -> ((-1)*p65+1)
15 --- 10  -> (p65)
16 --- 6  -> (p51)
16 --- 9  -> ((-1)*p51+1)
17 --- 6  -> (p52)
17 --- 9  -> ((-1)*p52+1)
18 --- 6  -> (p53)
18 --- 9  -> ((-1)*p53+1)
19 --- 6  -> (p54)
19 --- 9  -> ((-1)*p54+1)
20 --- 6  -> (p55)
20 --- 9  -> ((-1)*p55+1)
21 --- 8  -> (p41)
22 --- 8  -> (p42)
23 --- 8  -> (p43)
24 --- 8  -> (p44)
25 --- 8  -> (p45)
26 --- 6  -> (p31)
26 --- 9  -> ((-1)*p31+1)
27 --- 6  -> (p32)
27 --- 9  -> ((-1)*p32+1)
28 --- 6  -> (p33)
28 --- 9  -> ((-1)*p33+1)
29 --- 6  -> (p34)
29 --- 9  -> ((-1)*p34+1)
30 --- 6  -> (p35)
30 --- 9  -> ((-1)*p35+1)
31 --- 7  -> (p21)
32 --- 7  -> (p22)
33 --- 7  -> (p23)
34 --- 7  -> (p24)
35 --- 7  -> (p25)
36 --- 2  -> (p11)
37 --- 2  -> (p12)
38 --- 2  -> (p13)
39 --- 2  -> (p14)
40 --- 2  -> (p15)
8 --- 21  -> ( ((-1)*z1-z2+1) ) * ( (z41)/(z41+z42+z43+z44+z45) )
8 --- 22  -> ( ((-1)*z1-z2+1) ) * ( (z42)/(z41+z42+z43+z44+z45) )
8 --- 23  -> ( ((-1)*z1-z2+1) ) * ( (z43)/(z41+z42+z43+z44+z45) )
8 --- 24  -> ( ((-1)*z1-z2+1) ) * ( (z44)/(z41+z42+z43+z44+z45) )
8 --- 25  -> ( ((-1)*z1-z2+1) ) * ( (z45)/(z41+z42+z43+z44+z45) )
32 --- 41  -> ((-1)*p22+1)
41 --- 9  -> 1
33 --- 42  -> ((-1)*p23+1)
42 --- 9  -> 1
34 --- 43  -> ((-1)*p24+1)
43 --- 9  -> 1
35 --- 44  -> ((-1)*p25+1)
44 --- 9  -> 1
8 --- 16  -> ( (z1) ) * ( (z51)/(z51+z52+z53+z54+z55) )
8 --- 17  -> ( (z1) ) * ( (z52)/(z51+z52+z53+z54+z55) )
8 --- 18  -> ( (z1) ) * ( (z53)/(z51+z52+z53+z54+z55) )
8 --- 19  -> ( (z1) ) * ( (z54)/(z51+z52+z53+z54+z55) )
8 --- 20  -> ( (z1) ) * ( (z55)/(z51+z52+z53+z54+z55) )
31 --- 45  -> ((-1)*p21+1)
45 --- 9  -> 1
36 --- 46  -> ((-1)*p11+1)
46 --- 9  -> 1
37 --- 47  -> ((-1)*p12+1)
47 --- 9  -> 1
38 --- 48  -> ((-1)*p13+1)
48 --- 9  -> 1
39 --- 49  -> ((-1)*p14+1)
49 --- 9  -> 1
40 --- 50  -> ((-1)*p15+1)
50 --- 9  -> 1
8 --- 51  -> (z2)
51 --- 0  -> 1
4 --- 8  ->     ( (z41)/(z41+z42+z43+z44+z45) ) * ( (p41) ) + ( (z42)/(z41+z42+z43+z44+z45) ) * ( (p42) )  + ( (z43)/(z41+z42+z43+z44+z45) ) * ( (p43) )  + ( (z44)/(z41+z42+z43+z44+z45) ) * ( (p44) )  + ( (z45)/(z41+z42+z43+z44+z45) ) * ( (p45) ) 
4 --- 9  ->     ( (z41)/(z41+z42+z43+z44+z45) ) * ( ((-1)*p41+1) ) + ( (z42)/(z41+z42+z43+z44+z45) ) * ( ((-1)*p42+1) )  + ( (z43)/(z41+z42+z43+z44+z45) ) * ( ((-1)*p43+1) )  + ( (z44)/(z41+z42+z43+z44+z45) ) * ( ((-1)*p44+1) )  + ( (z45)/(z41+z42+z43+z44+z45) ) * ( ((-1)*p45+1) ) 
5 --- 6  ->     ( (z51)/(z51+z52+z53+z54+z55) ) * ( (p51) ) + ( (z52)/(z51+z52+z53+z54+z55) ) * ( (p52) )  + ( (z53)/(z51+z52+z53+z54+z55) ) * ( (p53) )  + ( (z54)/(z51+z52+z53+z54+z55) ) * ( (p54) )  + ( (z55)/(z51+z52+z53+z54+z55) ) * ( (p55) ) 
5 --- 9  ->     ( (z51)/(z51+z52+z53+z54+z55) ) * ( ((-1)*p51+1) ) + ( (z52)/(z51+z52+z53+z54+z55) ) * ( ((-1)*p52+1) )  + ( (z53)/(z51+z52+z53+z54+z55) ) * ( ((-1)*p53+1) )  + ( (z54)/(z51+z52+z53+z54+z55) ) * ( ((-1)*p54+1) )  + ( (z55)/(z51+z52+z53+z54+z55) ) * ( ((-1)*p55+1) ) 
21 --- 52  -> ((-1)*p41+1)
52 --- 9  -> 1
22 --- 53  -> ((-1)*p42+1)
53 --- 9  -> 1
23 --- 54  -> ((-1)*p43+1)
54 --- 9  -> 1
24 --- 55  -> ((-1)*p44+1)
55 --- 9  -> 1
25 --- 56  -> ((-1)*p45+1)
56 --- 9  -> 1


State--Fragment Number--visited--startingPoint--endingPoint
   0          1          true        true          false
   1          1          true        false          false
   2          1          true        false          false
   3          1          true        false          true
   4          1          true        false          true
   5          1          true        false          true
   6          2          true        true          false
   7          1          true        false          false
   8          3          true        true          false
   9          9          true        true          true
   10          10          true        true          true
   11          2          true        false          true
   12          2          true        false          true
   13          2          true        false          true
   14          2          true        false          true
   15          2          true        false          true
   16          3          true        false          true
   17          3          true        false          true
   18          3          true        false          true
   19          3          true        false          true
   20          3          true        false          true
   21          3          true        false          false
   22          3          true        false          false
   23          3          true        false          false
   24          3          true        false          false
   25          3          true        false          false
   26          4          true        true          true
   27          5          true        true          true
   28          6          true        true          true
   29          7          true        true          true
   30          8          true        true          true
   31          1          true        false          false
   32          1          true        false          false
   33          1          true        false          false
   34          1          true        false          false
   35          1          true        false          false
   36          1          true        false          false
   37          1          true        false          false
   38          1          true        false          false
   39          1          true        false          false
   40          1          true        false          false
   41          1          true        false          true
   42          1          true        false          true
   43          1          true        false          true
   44          1          true        false          true
   45          1          true        false          true
   46          1          true        false          true
   47          1          true        false          true
   48          1          true        false          true
   49          1          true        false          true
   50          1          true        false          true
   51          3          true        false          true
   52          3          true        false          true
   53          3          true        false          true
   54          3          true        false          true
   55          3          true        false          true
   56          3          true        false          true

This is transition in Fragment (1) 
    [0, 1]  (x)
    [0, 4]  ((-1)*x+1)
    [1, 36]  (z11)/(z11+z12+z13+z14+z15)
    [1, 37]  (z12)/(z11+z12+z13+z14+z15)
    [1, 38]  (z13)/(z11+z12+z13+z14+z15)
    [1, 39]  (z14)/(z11+z12+z13+z14+z15)
    [1, 40]  (z15)/(z11+z12+z13+z14+z15)
    [2, 31]  (z21)/(z21+z22+z23+z24+z25)
    [2, 32]  (z22)/(z21+z22+z23+z24+z25)
    [2, 33]  (z23)/(z21+z22+z23+z24+z25)
    [2, 34]  (z24)/(z21+z22+z23+z24+z25)
    [2, 35]  (z25)/(z21+z22+z23+z24+z25)
    [7, 1]  (y2)
    [7, 3]  ((-1)*y1-y2+1)
    [7, 5]  (y1)
    [31, 7]  (p21)
    [32, 7]  (p22)
    [33, 7]  (p23)
    [34, 7]  (p24)
    [35, 7]  (p25)
    [36, 2]  (p11)
    [37, 2]  (p12)
    [38, 2]  (p13)
    [39, 2]  (p14)
    [40, 2]  (p15)
    [32, 41]  ((-1)*p22+1)
    [33, 42]  ((-1)*p23+1)
    [34, 43]  ((-1)*p24+1)
    [35, 44]  ((-1)*p25+1)
    [31, 45]  ((-1)*p21+1)
    [36, 46]  ((-1)*p11+1)
    [37, 47]  ((-1)*p12+1)
    [38, 48]  ((-1)*p13+1)
    [39, 49]  ((-1)*p14+1)
    [40, 50]  ((-1)*p15+1)
    [3, 3]  1
    [4, 4]  1
    [5, 5]  1
    [41, 41]  1
    [42, 42]  1
    [43, 43]  1
    [44, 44]  1
    [45, 45]  1
    [46, 46]  1
    [47, 47]  1
    [48, 48]  1
    [49, 49]  1
    [50, 50]  1

This is transition in Fragment (2) 
    [6, 11]  (z61)/(z61+z62+z63+z64+z65)
    [6, 12]  (z62)/(z61+z62+z63+z64+z65)
    [6, 13]  (z63)/(z61+z62+z63+z64+z65)
    [6, 14]  (z64)/(z61+z62+z63+z64+z65)
    [6, 15]  (z65)/(z61+z62+z63+z64+z65)
    [11, 11]  1
    [12, 12]  1
    [13, 13]  1
    [14, 14]  1
    [15, 15]  1

This is transition in Fragment (3) 
    [21, 8]  (p41)
    [22, 8]  (p42)
    [23, 8]  (p43)
    [24, 8]  (p44)
    [25, 8]  (p45)
    [8, 21]  ( ((-1)*z1-z2+1) ) * ( (z41)/(z41+z42+z43+z44+z45) )
    [8, 22]  ( ((-1)*z1-z2+1) ) * ( (z42)/(z41+z42+z43+z44+z45) )
    [8, 23]  ( ((-1)*z1-z2+1) ) * ( (z43)/(z41+z42+z43+z44+z45) )
    [8, 24]  ( ((-1)*z1-z2+1) ) * ( (z44)/(z41+z42+z43+z44+z45) )
    [8, 25]  ( ((-1)*z1-z2+1) ) * ( (z45)/(z41+z42+z43+z44+z45) )
    [8, 16]  ( (z1) ) * ( (z51)/(z51+z52+z53+z54+z55) )
    [8, 17]  ( (z1) ) * ( (z52)/(z51+z52+z53+z54+z55) )
    [8, 18]  ( (z1) ) * ( (z53)/(z51+z52+z53+z54+z55) )
    [8, 19]  ( (z1) ) * ( (z54)/(z51+z52+z53+z54+z55) )
    [8, 20]  ( (z1) ) * ( (z55)/(z51+z52+z53+z54+z55) )
    [8, 51]  (z2)
    [21, 52]  ((-1)*p41+1)
    [22, 53]  ((-1)*p42+1)
    [23, 54]  ((-1)*p43+1)
    [24, 55]  ((-1)*p44+1)
    [25, 56]  ((-1)*p45+1)
    [16, 16]  1
    [17, 17]  1
    [18, 18]  1
    [19, 19]  1
    [20, 20]  1
    [51, 51]  1
    [52, 52]  1
    [53, 53]  1
    [54, 54]  1
    [55, 55]  1
    [56, 56]  1

This is transition in Fragment (4) 
    [26, 26]  1

This is transition in Fragment (5) 
    [27, 27]  1

This is transition in Fragment (6) 
    [28, 28]  1

This is transition in Fragment (7) 
    [29, 29]  1

This is transition in Fragment (8) 
    [30, 30]  1

This is transition in Fragment (9) 
    [9, 9]  1

This is transition in Fragment (10) 
    [10, 10]  1
prob_f1_s3  =(  x * y1 * z21 * p21 * z12 * p12 + x * y2 * z21 * p21 * z12 * p12 + x * y1 * z23 * p23 * z12 * p12 + x * y2 * z23 * p23 * z12 * p12 + x * y1 * z22 * p22 * z12 * p12 + x * y2 * z22 * p22 * z12 * p12 + x * y1 * z25 * p25 * z12 * p12 + x * y2 * z25 * p25 * z12 * p12 + x * y1 * z24 * p24 * z12 * p12 + x * y2 * z24 * p24 * z12 * p12 + x * y1 * z21 * p21 * z11 * p11 + x * y2 * z21 * p21 * z11 * p11 + x * y1 * z23 * p23 * z11 * p11 + x * y2 * z23 * p23 * z11 * p11 + x * y1 * z22 * p22 * z11 * p11 + x * y2 * z22 * p22 * z11 * p11 + x * y1 * z25 * p25 * z11 * p11 + x * y2 * z25 * p25 * z11 * p11 + x * y1 * z24 * p24 * z11 * p11 + x * y2 * z24 * p24 * z11 * p11 + x * y1 * z21 * p21 * z14 * p14 + x * y2 * z21 * p21 * z14 * p14 + x * y1 * z23 * p23 * z14 * p14 + x * y2 * z23 * p23 * z14 * p14 + x * y1 * z22 * p22 * z14 * p14 + x * y2 * z22 * p22 * z14 * p14 + x * y1 * z25 * p25 * z14 * p14 + x * y2 * z25 * p25 * z14 * p14 + x * y1 * z24 * p24 * z14 * p14 + x * y2 * z24 * p24 * z14 * p14 + x * y1 * z21 * p21 * z13 * p13 + x * y2 * z21 * p21 * z13 * p13 + x * y1 * z23 * p23 * z13 * p13 + x * y2 * z23 * p23 * z13 * p13 + x * y1 * z22 * p22 * z13 * p13 + x * y2 * z22 * p22 * z13 * p13 + x * y1 * z25 * p25 * z13 * p13 + x * y2 * z25 * p25 * z13 * p13 + x * y1 * z24 * p24 * z13 * p13 + x * y2 * z24 * p24 * z13 * p13 + x * y1 * z21 * p21 * z15 * p15 + x * y2 * z21 * p21 * z15 * p15 + x * y1 * z23 * p23 * z15 * p15 + x * y2 * z23 * p23 * z15 * p15 + x * y1 * z22 * p22 * z15 * p15 + x * y2 * z22 * p22 * z15 * p15 + x * y1 * z25 * p25 * z15 * p15 + x * y2 * z25 * p25 * z15 * p15 + x * y1 * z24 * p24 * z15 * p15 + x * y2 * z24 * p24 * z15 * p15 - x * z21 * p21 * z12 * p12 - x * z23 * p23 * z12 * p12 - x * z22 * p22 * z12 * p12 - x * z25 * p25 * z12 * p12 - x * z24 * p24 * z12 * p12 - x * z21 * p21 * z11 * p11 - x * z23 * p23 * z11 * p11 - x * z22 * p22 * z11 * p11 - x * z25 * p25 * z11 * p11 - x * z24 * p24 * z11 * p11 - x * z21 * p21 * z14 * p14 - x * z23 * p23 * z14 * p14 - x * z22 * p22 * z14 * p14 - x * z25 * p25 * z14 * p14 - x * z24 * p24 * z14 * p14 - x * z21 * p21 * z13 * p13 - x * z23 * p23 * z13 * p13 - x * z22 * p22 * z13 * p13 - x * z25 * p25 * z13 * p13 - x * z24 * p24 * z13 * p13 - x * z21 * p21 * z15 * p15 - x * z23 * p23 * z15 * p15 - x * z22 * p22 * z15 * p15 - x * z25 * p25 * z15 * p15 - x * z24 * p24 * z15 * p15 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s4  =(  (-1)* x + 1  ); 
prob_f1_s5  =(  (-1)* x * y1 * z21 * p21 * z12 * p12 - x * y1 * z23 * p23 * z12 * p12 - x * y1 * z22 * p22 * z12 * p12 - x * y1 * z25 * p25 * z12 * p12 - x * y1 * z24 * p24 * z12 * p12 - x * y1 * z21 * p21 * z11 * p11 - x * y1 * z23 * p23 * z11 * p11 - x * y1 * z22 * p22 * z11 * p11 - x * y1 * z25 * p25 * z11 * p11 - x * y1 * z24 * p24 * z11 * p11 - x * y1 * z21 * p21 * z14 * p14 - x * y1 * z23 * p23 * z14 * p14 - x * y1 * z22 * p22 * z14 * p14 - x * y1 * z25 * p25 * z14 * p14 - x * y1 * z24 * p24 * z14 * p14 - x * y1 * z21 * p21 * z13 * p13 - x * y1 * z23 * p23 * z13 * p13 - x * y1 * z22 * p22 * z13 * p13 - x * y1 * z25 * p25 * z13 * p13 - x * y1 * z24 * p24 * z13 * p13 - x * y1 * z21 * p21 * z15 * p15 - x * y1 * z23 * p23 * z15 * p15 - x * y1 * z22 * p22 * z15 * p15 - x * y1 * z25 * p25 * z15 * p15 - x * y1 * z24 * p24 * z15 * p15 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s41  =(  x * z22 * p22 * z12 * p12 + x * z22 * p22 * z11 * p11 + x * z22 * p22 * z14 * p14 + x * z22 * p22 * z13 * p13 + x * z22 * p22 * z15 * p15 - x * z22 * z12 * p12 - x * z22 * z11 * p11 - x * z22 * z14 * p14 - x * z22 * z13 * p13 - x * z22 * z15 * p15 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s42  =(  x * z23 * p23 * z12 * p12 + x * z23 * p23 * z11 * p11 + x * z23 * p23 * z14 * p14 + x * z23 * p23 * z13 * p13 + x * z23 * p23 * z15 * p15 - x * z23 * z12 * p12 - x * z23 * z11 * p11 - x * z23 * z14 * p14 - x * z23 * z13 * p13 - x * z23 * z15 * p15 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s43  =(  x * z24 * p24 * z12 * p12 + x * z24 * p24 * z11 * p11 + x * z24 * p24 * z14 * p14 + x * z24 * p24 * z13 * p13 + x * z24 * p24 * z15 * p15 - x * z24 * z12 * p12 - x * z24 * z11 * p11 - x * z24 * z14 * p14 - x * z24 * z13 * p13 - x * z24 * z15 * p15 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s44  =(  x * z25 * p25 * z12 * p12 + x * z25 * p25 * z11 * p11 + x * z25 * p25 * z14 * p14 + x * z25 * p25 * z13 * p13 + x * z25 * p25 * z15 * p15 - x * z25 * z12 * p12 - x * z25 * z11 * p11 - x * z25 * z14 * p14 - x * z25 * z13 * p13 - x * z25 * z15 * p15 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s45  =(  x * z21 * p21 * z12 * p12 + x * z21 * p21 * z11 * p11 + x * z21 * p21 * z14 * p14 + x * z21 * p21 * z13 * p13 + x * z21 * p21 * z15 * p15 - x * z21 * z12 * p12 - x * z21 * z11 * p11 - x * z21 * z14 * p14 - x * z21 * z13 * p13 - x * z21 * z15 * p15 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s46  =(  x * z21 * z11 * p11 + x * z23 * z11 * p11 + x * z22 * z11 * p11 + x * z25 * z11 * p11 + x * z24 * z11 * p11 - x * z21 * z11 - x * z23 * z11 - x * z22 * z11 - x * z25 * z11 - x * z24 * z11 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s47  =(  x * z21 * z12 * p12 + x * z23 * z12 * p12 + x * z22 * z12 * p12 + x * z25 * z12 * p12 + x * z24 * z12 * p12 - x * z21 * z12 - x * z23 * z12 - x * z22 * z12 - x * z25 * z12 - x * z24 * z12 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s48  =(  x * z21 * z13 * p13 + x * z23 * z13 * p13 + x * z22 * z13 * p13 + x * z25 * z13 * p13 + x * z24 * z13 * p13 - x * z21 * z13 - x * z23 * z13 - x * z22 * z13 - x * z25 * z13 - x * z24 * z13 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s49  =(  x * z21 * z14 * p14 + x * z23 * z14 * p14 + x * z22 * z14 * p14 + x * z25 * z14 * p14 + x * z24 * z14 * p14 - x * z21 * z14 - x * z23 * z14 - x * z22 * z14 - x * z25 * z14 - x * z24 * z14 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f1_s50  =(  x * z21 * z15 * p15 + x * z23 * z15 * p15 + x * z22 * z15 * p15 + x * z25 * z15 * p15 + x * z24 * z15 * p15 - x * z21 * z15 - x * z23 * z15 - x * z22 * z15 - x * z25 * z15 - x * z24 * z15 ) / ( y2 * z21 * p21 * z12 * p12 + y2 * z23 * p23 * z12 * p12 + y2 * z22 * p22 * z12 * p12 + y2 * z25 * p25 * z12 * p12 + y2 * z24 * p24 * z12 * p12 + y2 * z21 * p21 * z11 * p11 + y2 * z23 * p23 * z11 * p11 + y2 * z22 * p22 * z11 * p11 + y2 * z25 * p25 * z11 * p11 + y2 * z24 * p24 * z11 * p11 + y2 * z21 * p21 * z14 * p14 + y2 * z23 * p23 * z14 * p14 + y2 * z22 * p22 * z14 * p14 + y2 * z25 * p25 * z14 * p14 + y2 * z24 * p24 * z14 * p14 + y2 * z21 * p21 * z13 * p13 + y2 * z23 * p23 * z13 * p13 + y2 * z22 * p22 * z13 * p13 + y2 * z25 * p25 * z13 * p13 + y2 * z24 * p24 * z13 * p13 + y2 * z21 * p21 * z15 * p15 + y2 * z23 * p23 * z15 * p15 + y2 * z22 * p22 * z15 * p15 + y2 * z25 * p25 * z15 * p15 + y2 * z24 * p24 * z15 * p15 - z21 * z12 - z23 * z12 - z22 * z12 - z25 * z12 - z24 * z12 - z21 * z11 - z23 * z11 - z22 * z11 - z25 * z11 - z24 * z11 - z21 * z14 - z23 * z14 - z22 * z14 - z25 * z14 - z24 * z14 - z21 * z13 - z23 * z13 - z22 * z13 - z25 * z13 - z24 * z13 - z21 * z15 - z23 * z15 - z22 * z15 - z25 * z15 - z24 * z15 ); 
prob_f2_s11  =(  z61 ) / ( z61 + z63 + z62 + z65 + z64 ); 
prob_f2_s12  =(  z62 ) / ( z61 + z63 + z62 + z65 + z64 ); 
prob_f2_s13  =(  z63 ) / ( z61 + z63 + z62 + z65 + z64 ); 
prob_f2_s14  =(  z64 ) / ( z61 + z63 + z62 + z65 + z64 ); 
prob_f2_s15  =(  z65 ) / ( z61 + z63 + z62 + z65 + z64 ); 
prob_f3_s16  =(  z1 * z41 * z51 + z43 * z1 * z51 + z42 * z1 * z51 + z45 * z1 * z51 + z44 * z1 * z51 ) / ( z1 * z41 * p41 * z52 + z2 * z41 * p41 * z52 + z43 * z1 * p43 * z52 + z43 * z2 * p43 * z52 + z42 * z1 * p42 * z52 + z42 * z2 * p42 * z52 + z45 * z1 * p45 * z52 + z45 * z2 * p45 * z52 + z44 * z1 * p44 * z52 + z44 * z2 * p44 * z52 + z1 * z41 * p41 * z51 + z2 * z41 * p41 * z51 + z43 * z1 * p43 * z51 + z43 * z2 * p43 * z51 + z42 * z1 * p42 * z51 + z42 * z2 * p42 * z51 + z45 * z1 * p45 * z51 + z45 * z2 * p45 * z51 + z44 * z1 * p44 * z51 + z44 * z2 * p44 * z51 + z1 * z41 * p41 * z54 + z2 * z41 * p41 * z54 + z43 * z1 * p43 * z54 + z43 * z2 * p43 * z54 + z42 * z1 * p42 * z54 + z42 * z2 * p42 * z54 + z45 * z1 * p45 * z54 + z45 * z2 * p45 * z54 + z44 * z1 * p44 * z54 + z44 * z2 * p44 * z54 + z1 * z41 * p41 * z53 + z2 * z41 * p41 * z53 + z43 * z1 * p43 * z53 + z43 * z2 * p43 * z53 + z42 * z1 * p42 * z53 + z42 * z2 * p42 * z53 + z45 * z1 * p45 * z53 + z45 * z2 * p45 * z53 + z44 * z1 * p44 * z53 + z44 * z2 * p44 * z53 + z1 * z41 * p41 * z55 + z2 * z41 * p41 * z55 + z43 * z1 * p43 * z55 + z43 * z2 * p43 * z55 + z42 * z1 * p42 * z55 + z42 * z2 * p42 * z55 + z45 * z1 * p45 * z55 + z45 * z2 * p45 * z55 + z44 * z1 * p44 * z55 + z44 * z2 * p44 * z55 - z41 * p41 * z52 - z43 * p43 * z52 - z42 * p42 * z52 - z45 * p45 * z52 - z44 * p44 * z52 - z41 * p41 * z51 - z43 * p43 * z51 - z42 * p42 * z51 - z45 * p45 * z51 - z44 * p44 * z51 - z41 * p41 * z54 - z43 * p43 * z54 - z42 * p42 * z54 - z45 * p45 * z54 - z44 * p44 * z54 - z41 * p41 * z53 - z43 * p43 * z53 - z42 * p42 * z53 - z45 * p45 * z53 - z44 * p44 * z53 - z41 * p41 * z55 - z43 * p43 * z55 - z42 * p42 * z55 - z45 * p45 * z55 - z44 * p44 * z55 + z41 * z52 + z43 * z52 + z42 * z52 + z45 * z52 + z44 * z52 + z41 * z51 + z43 * z51 + z42 * z51 + z45 * z51 + z44 * z51 + z41 * z54 + z43 * z54 + z42 * z54 + z45 * z54 + z44 * z54 + z41 * z53 + z43 * z53 + z42 * z53 + z45 * z53 + z44 * z53 + z41 * z55 + z43 * z55 + z42 * z55 + z45 * z55 + z44 * z55 ); 
prob_f3_s17  =(  z1 * z41 * z52 + z43 * z1 * z52 + z42 * z1 * z52 + z45 * z1 * z52 + z44 * z1 * z52 ) / ( z1 * z41 * p41 * z52 + z2 * z41 * p41 * z52 + z43 * z1 * p43 * z52 + z43 * z2 * p43 * z52 + z42 * z1 * p42 * z52 + z42 * z2 * p42 * z52 + z45 * z1 * p45 * z52 + z45 * z2 * p45 * z52 + z44 * z1 * p44 * z52 + z44 * z2 * p44 * z52 + z1 * z41 * p41 * z51 + z2 * z41 * p41 * z51 + z43 * z1 * p43 * z51 + z43 * z2 * p43 * z51 + z42 * z1 * p42 * z51 + z42 * z2 * p42 * z51 + z45 * z1 * p45 * z51 + z45 * z2 * p45 * z51 + z44 * z1 * p44 * z51 + z44 * z2 * p44 * z51 + z1 * z41 * p41 * z54 + z2 * z41 * p41 * z54 + z43 * z1 * p43 * z54 + z43 * z2 * p43 * z54 + z42 * z1 * p42 * z54 + z42 * z2 * p42 * z54 + z45 * z1 * p45 * z54 + z45 * z2 * p45 * z54 + z44 * z1 * p44 * z54 + z44 * z2 * p44 * z54 + z1 * z41 * p41 * z53 + z2 * z41 * p41 * z53 + z43 * z1 * p43 * z53 + z43 * z2 * p43 * z53 + z42 * z1 * p42 * z53 + z42 * z2 * p42 * z53 + z45 * z1 * p45 * z53 + z45 * z2 * p45 * z53 + z44 * z1 * p44 * z53 + z44 * z2 * p44 * z53 + z1 * z41 * p41 * z55 + z2 * z41 * p41 * z55 + z43 * z1 * p43 * z55 + z43 * z2 * p43 * z55 + z42 * z1 * p42 * z55 + z42 * z2 * p42 * z55 + z45 * z1 * p45 * z55 + z45 * z2 * p45 * z55 + z44 * z1 * p44 * z55 + z44 * z2 * p44 * z55 - z41 * p41 * z52 - z43 * p43 * z52 - z42 * p42 * z52 - z45 * p45 * z52 - z44 * p44 * z52 - z41 * p41 * z51 - z43 * p43 * z51 - z42 * p42 * z51 - z45 * p45 * z51 - z44 * p44 * z51 - z41 * p41 * z54 - z43 * p43 * z54 - z42 * p42 * z54 - z45 * p45 * z54 - z44 * p44 * z54 - z41 * p41 * z53 - z43 * p43 * z53 - z42 * p42 * z53 - z45 * p45 * z53 - z44 * p44 * z53 - z41 * p41 * z55 - z43 * p43 * z55 - z42 * p42 * z55 - z45 * p45 * z55 - z44 * p44 * z55 + z41 * z52 + z43 * z52 + z42 * z52 + z45 * z52 + z44 * z52 + z41 * z51 + z43 * z51 + z42 * z51 + z45 * z51 + z44 * z51 + z41 * z54 + z43 * z54 + z42 * z54 + z45 * z54 + z44 * z54 + z41 * z53 + z43 * z53 + z42 * z53 + z45 * z53 + z44 * z53 + z41 * z55 + z43 * z55 + z42 * z55 + z45 * z55 + z44 * z55 ); 
prob_f3_s18  =(  z1 * z41 * z53 + z43 * z1 * z53 + z42 * z1 * z53 + z45 * z1 * z53 + z44 * z1 * z53 ) / ( z1 * z41 * p41 * z52 + z2 * z41 * p41 * z52 + z43 * z1 * p43 * z52 + z43 * z2 * p43 * z52 + z42 * z1 * p42 * z52 + z42 * z2 * p42 * z52 + z45 * z1 * p45 * z52 + z45 * z2 * p45 * z52 + z44 * z1 * p44 * z52 + z44 * z2 * p44 * z52 + z1 * z41 * p41 * z51 + z2 * z41 * p41 * z51 + z43 * z1 * p43 * z51 + z43 * z2 * p43 * z51 + z42 * z1 * p42 * z51 + z42 * z2 * p42 * z51 + z45 * z1 * p45 * z51 + z45 * z2 * p45 * z51 + z44 * z1 * p44 * z51 + z44 * z2 * p44 * z51 + z1 * z41 * p41 * z54 + z2 * z41 * p41 * z54 + z43 * z1 * p43 * z54 + z43 * z2 * p43 * z54 + z42 * z1 * p42 * z54 + z42 * z2 * p42 * z54 + z45 * z1 * p45 * z54 + z45 * z2 * p45 * z54 + z44 * z1 * p44 * z54 + z44 * z2 * p44 * z54 + z1 * z41 * p41 * z53 + z2 * z41 * p41 * z53 + z43 * z1 * p43 * z53 + z43 * z2 * p43 * z53 + z42 * z1 * p42 * z53 + z42 * z2 * p42 * z53 + z45 * z1 * p45 * z53 + z45 * z2 * p45 * z53 + z44 * z1 * p44 * z53 + z44 * z2 * p44 * z53 + z1 * z41 * p41 * z55 + z2 * z41 * p41 * z55 + z43 * z1 * p43 * z55 + z43 * z2 * p43 * z55 + z42 * z1 * p42 * z55 + z42 * z2 * p42 * z55 + z45 * z1 * p45 * z55 + z45 * z2 * p45 * z55 + z44 * z1 * p44 * z55 + z44 * z2 * p44 * z55 - z41 * p41 * z52 - z43 * p43 * z52 - z42 * p42 * z52 - z45 * p45 * z52 - z44 * p44 * z52 - z41 * p41 * z51 - z43 * p43 * z51 - z42 * p42 * z51 - z45 * p45 * z51 - z44 * p44 * z51 - z41 * p41 * z54 - z43 * p43 * z54 - z42 * p42 * z54 - z45 * p45 * z54 - z44 * p44 * z54 - z41 * p41 * z53 - z43 * p43 * z53 - z42 * p42 * z53 - z45 * p45 * z53 - z44 * p44 * z53 - z41 * p41 * z55 - z43 * p43 * z55 - z42 * p42 * z55 - z45 * p45 * z55 - z44 * p44 * z55 + z41 * z52 + z43 * z52 + z42 * z52 + z45 * z52 + z44 * z52 + z41 * z51 + z43 * z51 + z42 * z51 + z45 * z51 + z44 * z51 + z41 * z54 + z43 * z54 + z42 * z54 + z45 * z54 + z44 * z54 + z41 * z53 + z43 * z53 + z42 * z53 + z45 * z53 + z44 * z53 + z41 * z55 + z43 * z55 + z42 * z55 + z45 * z55 + z44 * z55 ); 
prob_f3_s19  =(  z1 * z41 * z54 + z43 * z1 * z54 + z42 * z1 * z54 + z45 * z1 * z54 + z44 * z1 * z54 ) / ( z1 * z41 * p41 * z52 + z2 * z41 * p41 * z52 + z43 * z1 * p43 * z52 + z43 * z2 * p43 * z52 + z42 * z1 * p42 * z52 + z42 * z2 * p42 * z52 + z45 * z1 * p45 * z52 + z45 * z2 * p45 * z52 + z44 * z1 * p44 * z52 + z44 * z2 * p44 * z52 + z1 * z41 * p41 * z51 + z2 * z41 * p41 * z51 + z43 * z1 * p43 * z51 + z43 * z2 * p43 * z51 + z42 * z1 * p42 * z51 + z42 * z2 * p42 * z51 + z45 * z1 * p45 * z51 + z45 * z2 * p45 * z51 + z44 * z1 * p44 * z51 + z44 * z2 * p44 * z51 + z1 * z41 * p41 * z54 + z2 * z41 * p41 * z54 + z43 * z1 * p43 * z54 + z43 * z2 * p43 * z54 + z42 * z1 * p42 * z54 + z42 * z2 * p42 * z54 + z45 * z1 * p45 * z54 + z45 * z2 * p45 * z54 + z44 * z1 * p44 * z54 + z44 * z2 * p44 * z54 + z1 * z41 * p41 * z53 + z2 * z41 * p41 * z53 + z43 * z1 * p43 * z53 + z43 * z2 * p43 * z53 + z42 * z1 * p42 * z53 + z42 * z2 * p42 * z53 + z45 * z1 * p45 * z53 + z45 * z2 * p45 * z53 + z44 * z1 * p44 * z53 + z44 * z2 * p44 * z53 + z1 * z41 * p41 * z55 + z2 * z41 * p41 * z55 + z43 * z1 * p43 * z55 + z43 * z2 * p43 * z55 + z42 * z1 * p42 * z55 + z42 * z2 * p42 * z55 + z45 * z1 * p45 * z55 + z45 * z2 * p45 * z55 + z44 * z1 * p44 * z55 + z44 * z2 * p44 * z55 - z41 * p41 * z52 - z43 * p43 * z52 - z42 * p42 * z52 - z45 * p45 * z52 - z44 * p44 * z52 - z41 * p41 * z51 - z43 * p43 * z51 - z42 * p42 * z51 - z45 * p45 * z51 - z44 * p44 * z51 - z41 * p41 * z54 - z43 * p43 * z54 - z42 * p42 * z54 - z45 * p45 * z54 - z44 * p44 * z54 - z41 * p41 * z53 - z43 * p43 * z53 - z42 * p42 * z53 - z45 * p45 * z53 - z44 * p44 * z53 - z41 * p41 * z55 - z43 * p43 * z55 - z42 * p42 * z55 - z45 * p45 * z55 - z44 * p44 * z55 + z41 * z52 + z43 * z52 + z42 * z52 + z45 * z52 + z44 * z52 + z41 * z51 + z43 * z51 + z42 * z51 + z45 * z51 + z44 * z51 + z41 * z54 + z43 * z54 + z42 * z54 + z45 * z54 + z44 * z54 + z41 * z53 + z43 * z53 + z42 * z53 + z45 * z53 + z44 * z53 + z41 * z55 + z43 * z55 + z42 * z55 + z45 * z55 + z44 * z55 ); 
prob_f3_s20  =(  z1 * z41 * z55 + z43 * z1 * z55 + z42 * z1 * z55 + z45 * z1 * z55 + z44 * z1 * z55 ) / ( z1 * z41 * p41 * z52 + z2 * z41 * p41 * z52 + z43 * z1 * p43 * z52 + z43 * z2 * p43 * z52 + z42 * z1 * p42 * z52 + z42 * z2 * p42 * z52 + z45 * z1 * p45 * z52 + z45 * z2 * p45 * z52 + z44 * z1 * p44 * z52 + z44 * z2 * p44 * z52 + z1 * z41 * p41 * z51 + z2 * z41 * p41 * z51 + z43 * z1 * p43 * z51 + z43 * z2 * p43 * z51 + z42 * z1 * p42 * z51 + z42 * z2 * p42 * z51 + z45 * z1 * p45 * z51 + z45 * z2 * p45 * z51 + z44 * z1 * p44 * z51 + z44 * z2 * p44 * z51 + z1 * z41 * p41 * z54 + z2 * z41 * p41 * z54 + z43 * z1 * p43 * z54 + z43 * z2 * p43 * z54 + z42 * z1 * p42 * z54 + z42 * z2 * p42 * z54 + z45 * z1 * p45 * z54 + z45 * z2 * p45 * z54 + z44 * z1 * p44 * z54 + z44 * z2 * p44 * z54 + z1 * z41 * p41 * z53 + z2 * z41 * p41 * z53 + z43 * z1 * p43 * z53 + z43 * z2 * p43 * z53 + z42 * z1 * p42 * z53 + z42 * z2 * p42 * z53 + z45 * z1 * p45 * z53 + z45 * z2 * p45 * z53 + z44 * z1 * p44 * z53 + z44 * z2 * p44 * z53 + z1 * z41 * p41 * z55 + z2 * z41 * p41 * z55 + z43 * z1 * p43 * z55 + z43 * z2 * p43 * z55 + z42 * z1 * p42 * z55 + z42 * z2 * p42 * z55 + z45 * z1 * p45 * z55 + z45 * z2 * p45 * z55 + z44 * z1 * p44 * z55 + z44 * z2 * p44 * z55 - z41 * p41 * z52 - z43 * p43 * z52 - z42 * p42 * z52 - z45 * p45 * z52 - z44 * p44 * z52 - z41 * p41 * z51 - z43 * p43 * z51 - z42 * p42 * z51 - z45 * p45 * z51 - z44 * p44 * z51 - z41 * p41 * z54 - z43 * p43 * z54 - z42 * p42 * z54 - z45 * p45 * z54 - z44 * p44 * z54 - z41 * p41 * z53 - z43 * p43 * z53 - z42 * p42 * z53 - z45 * p45 * z53 - z44 * p44 * z53 - z41 * p41 * z55 - z43 * p43 * z55 - z42 * p42 * z55 - z45 * p45 * z55 - z44 * p44 * z55 + z41 * z52 + z43 * z52 + z42 * z52 + z45 * z52 + z44 * z52 + z41 * z51 + z43 * z51 + z42 * z51 + z45 * z51 + z44 * z51 + z41 * z54 + z43 * z54 + z42 * z54 + z45 * z54 + z44 * z54 + z41 * z53 + z43 * z53 + z42 * z53 + z45 * z53 + z44 * z53 + z41 * z55 + z43 * z55 + z42 * z55 + z45 * z55 + z44 * z55 ); 
prob_f3_s51  =(  z2 * z41 + z43 * z2 + z42 * z2 + z45 * z2 + z44 * z2 ) / ( z1 * z41 * p41 + z2 * z41 * p41 + z43 * z1 * p43 + z43 * z2 * p43 + z42 * z1 * p42 + z42 * z2 * p42 + z45 * z1 * p45 + z45 * z2 * p45 + z44 * z1 * p44 + z44 * z2 * p44 - z41 * p41 - z43 * p43 - z42 * p42 - z45 * p45 - z44 * p44 + z41 + z43 + z42 + z45 + z44 ); 
prob_f3_s52  =(  z1 * z41 * p41 + z2 * z41 * p41 - z41 * p41 - z1 * z41 - z2 * z41 + z41 ) / ( z1 * z41 * p41 + z2 * z41 * p41 + z43 * z1 * p43 + z43 * z2 * p43 + z42 * z1 * p42 + z42 * z2 * p42 + z45 * z1 * p45 + z45 * z2 * p45 + z44 * z1 * p44 + z44 * z2 * p44 - z41 * p41 - z43 * p43 - z42 * p42 - z45 * p45 - z44 * p44 + z41 + z43 + z42 + z45 + z44 ); 
prob_f3_s53  =(  z42 * z1 * p42 + z42 * z2 * p42 - z42 * p42 - z42 * z1 - z42 * z2 + z42 ) / ( z1 * z41 * p41 + z2 * z41 * p41 + z43 * z1 * p43 + z43 * z2 * p43 + z42 * z1 * p42 + z42 * z2 * p42 + z45 * z1 * p45 + z45 * z2 * p45 + z44 * z1 * p44 + z44 * z2 * p44 - z41 * p41 - z43 * p43 - z42 * p42 - z45 * p45 - z44 * p44 + z41 + z43 + z42 + z45 + z44 ); 
prob_f3_s54  =(  z43 * z1 * p43 + z43 * z2 * p43 - z43 * p43 - z43 * z1 - z43 * z2 + z43 ) / ( z1 * z41 * p41 + z2 * z41 * p41 + z43 * z1 * p43 + z43 * z2 * p43 + z42 * z1 * p42 + z42 * z2 * p42 + z45 * z1 * p45 + z45 * z2 * p45 + z44 * z1 * p44 + z44 * z2 * p44 - z41 * p41 - z43 * p43 - z42 * p42 - z45 * p45 - z44 * p44 + z41 + z43 + z42 + z45 + z44 ); 
prob_f3_s55  =(  z44 * z1 * p44 + z44 * z2 * p44 - z44 * p44 - z44 * z1 - z44 * z2 + z44 ) / ( z1 * z41 * p41 + z2 * z41 * p41 + z43 * z1 * p43 + z43 * z2 * p43 + z42 * z1 * p42 + z42 * z2 * p42 + z45 * z1 * p45 + z45 * z2 * p45 + z44 * z1 * p44 + z44 * z2 * p44 - z41 * p41 - z43 * p43 - z42 * p42 - z45 * p45 - z44 * p44 + z41 + z43 + z42 + z45 + z44 ); 
prob_f3_s56  =(  z45 * z1 * p45 + z45 * z2 * p45 - z45 * p45 - z45 * z1 - z45 * z2 + z45 ) / ( z1 * z41 * p41 + z2 * z41 * p41 + z43 * z1 * p43 + z43 * z2 * p43 + z42 * z1 * p42 + z42 * z2 * p42 + z45 * z1 * p45 + z45 * z2 * p45 + z44 * z1 * p44 + z44 * z2 * p44 - z41 * p41 - z43 * p43 - z42 * p42 - z45 * p45 - z44 * p44 + z41 + z43 + z42 + z45 + z44 ); 
