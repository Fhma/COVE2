dtmc
  const double prob_f1_s50; 
  const double prob_f3_s19; 
  const double prob_f3_s18; 
  const double prob_f3_s17; 
  const double prob_f3_s16; 
  const double prob_f1_s49; 
  const double prob_f1_s48; 
  const double prob_f1_s47; 
  const double prob_f1_s46; 
  const double prob_f1_s45; 
  const double prob_f1_s44; 
  const double prob_f1_s43; 
  const double z32; 
  const double prob_f1_s42; 
  const double z31; 
  const double prob_f1_s41; 
  const double z34; 
  const double z33; 
  const double z35; 
  const double prob_f3_s20; 
  const double z41; 
  const double z43; 
  const double z42; 
  const double z45; 
  const double z44; 
  const double z52; 
  const double z51; 
  const double z54; 
  const double z53; 
  const double z55; 
  const double prob_f2_s14; 
  const double prob_f2_s13; 
  const double prob_f2_s15; 
  const double prob_f2_s12; 
  const double prob_f2_s11; 
  const double p32; 
  const double p31; 
  const double prob_f3_s55; 
  const double p34; 
  const double prob_f3_s54; 
  const double p33; 
  const double prob_f3_s53; 
  const double prob_f3_s52; 
  const double p35; 
  const double prob_f3_s56; 
  const double prob_f3_s51; 
  const double p41; 
  const double p43; 
  const double p42; 
  const double p45; 
  const double p44; 
  const double p52; 
  const double p51; 
  const double p54; 
  const double p53; 
  const double p55; 
  const double p61; 
  const double p63; 
  const double p62; 
  const double p65; 
  const double p64; 
  const double prob_f1_s4; 
  const double prob_f1_s3; 
  const double prob_f1_s5; 
 
 const double PX_0_1 = (( (z31)/(z31+z32+z33+z34+z35) ) * ( prob_f1_s3 )); 
  const double PX_0_2 = (( (z32)/(z31+z32+z33+z34+z35) ) * ( prob_f1_s3 ));
  const double PX_0_3 = (( (z33)/(z31+z32+z33+z34+z35) ) * ( prob_f1_s3 ));
  const double PX_0_4 = (( (z34)/(z31+z32+z33+z34+z35) ) * ( prob_f1_s3 ));
  const double PX_0_5 = (( (z35)/(z31+z32+z33+z34+z35) ) * ( prob_f1_s3 ));
  const double PX_0_22 = (           ( 1 ) * ( prob_f1_s41 ) + ( 1 ) * ( prob_f1_s42 )  + ( 1 ) * ( prob_f1_s43 )  + ( 1 ) * ( prob_f1_s44 )  + ( 1 ) * ( prob_f1_s45 )  + ( 1 ) * ( prob_f1_s46 )  + ( 1 ) * ( prob_f1_s47 )  + ( 1 ) * ( prob_f1_s48 )  + ( 1 ) * ( prob_f1_s49 )  + ( 1 ) * ( prob_f1_s50 )  + (     ( (z41)/(z41+z42+z43+z44+z45) ) * ( ((-1)*p41+1) ) + ( (z42)/(z41+z42+z43+z44+z45) ) * ( ((-1)*p42+1) )  + ( (z43)/(z41+z42+z43+z44+z45) ) * ( ((-1)*p43+1) )  + ( (z44)/(z41+z42+z43+z44+z45) ) * ( ((-1)*p44+1) )  + ( (z45)/(z41+z42+z43+z44+z45) ) * ( ((-1)*p45+1) )  ) * ( prob_f1_s4 )  + (     ( (z51)/(z51+z52+z53+z54+z55) ) * ( ((-1)*p51+1) ) + ( (z52)/(z51+z52+z53+z54+z55) ) * ( ((-1)*p52+1) )  + ( (z53)/(z51+z52+z53+z54+z55) ) * ( ((-1)*p53+1) )  + ( (z54)/(z51+z52+z53+z54+z55) ) * ( ((-1)*p54+1) )  + ( (z55)/(z51+z52+z53+z54+z55) ) * ( ((-1)*p55+1) )  ) * ( prob_f1_s5 ) );
  const double PX_0_24 = ((     ( (z41)/(z41+z42+z43+z44+z45) ) * ( (p41) ) + ( (z42)/(z41+z42+z43+z44+z45) ) * ( (p42) )  + ( (z43)/(z41+z42+z43+z44+z45) ) * ( (p43) )  + ( (z44)/(z41+z42+z43+z44+z45) ) * ( (p44) )  + ( (z45)/(z41+z42+z43+z44+z45) ) * ( (p45) )  ) * ( prob_f1_s4 ));
  const double PX_0_25 = ((     ( (z51)/(z51+z52+z53+z54+z55) ) * ( (p51) ) + ( (z52)/(z51+z52+z53+z54+z55) ) * ( (p52) )  + ( (z53)/(z51+z52+z53+z54+z55) ) * ( (p53) )  + ( (z54)/(z51+z52+z53+z54+z55) ) * ( (p54) )  + ( (z55)/(z51+z52+z53+z54+z55) ) * ( (p55) )  ) * ( prob_f1_s5 ));
 const double PX_1_8 = (    ( ((-1)*p61+1) ) * ( prob_f2_s11 ) + ( ((-1)*p62+1) ) * ( prob_f2_s12 )  + ( ((-1)*p63+1) ) * ( prob_f2_s13 )  + ( ((-1)*p64+1) ) * ( prob_f2_s14 )  + ( ((-1)*p65+1) ) * ( prob_f2_s15 ) ); 
  const double PX_1_9 = (    ( (p61) ) * ( prob_f2_s11 ) + ( (p62) ) * ( prob_f2_s12 )  + ( (p63) ) * ( prob_f2_s13 )  + ( (p64) ) * ( prob_f2_s14 )  + ( (p65) ) * ( prob_f2_s15 ) );
 const double PX_2_10 = (    ( (p51) ) * ( prob_f3_s16 ) + ( (p52) ) * ( prob_f3_s17 )  + ( (p53) ) * ( prob_f3_s18 )  + ( (p54) ) * ( prob_f3_s19 )  + ( (p55) ) * ( prob_f3_s20 ) ); 
  const double PX_2_11 = (         ( ((-1)*p51+1) ) * ( prob_f3_s16 ) + ( ((-1)*p52+1) ) * ( prob_f3_s17 )  + ( ((-1)*p53+1) ) * ( prob_f3_s18 )  + ( ((-1)*p54+1) ) * ( prob_f3_s19 )  + ( ((-1)*p55+1) ) * ( prob_f3_s20 )  + ( 1 ) * ( prob_f3_s52 )  + ( 1 ) * ( prob_f3_s53 )  + ( 1 ) * ( prob_f3_s54 )  + ( 1 ) * ( prob_f3_s55 )  + ( 1 ) * ( prob_f3_s56 ) );
  const double PX_2_23 = (( 1 ) * ( prob_f3_s51 ));
 const double PX_3_12 = ((p31)); 
  const double PX_3_13 = (((-1)*p31+1));
 const double PX_4_14 = ((p32)); 
  const double PX_4_15 = (((-1)*p32+1));
 const double PX_5_16 = ((p33)); 
  const double PX_5_17 = (((-1)*p33+1));
 const double PX_6_18 = ((p34)); 
  const double PX_6_19 = (((-1)*p34+1));
 const double PX_7_20 = ((p35)); 
  const double PX_7_21 = (((-1)*p35+1));
 const double PX_8_6 = ((1)); 
 const double PX_9_7 = ((1)); 

module abstract 
s : [0 .. 9] init 0; 
 
 [] s=0 -> (PX_0_1):(s'=3) + (PX_0_2):(s'=4) + (PX_0_3):(s'=5) + (PX_0_4):(s'=6) + (PX_0_5):(s'=7) + (PX_0_22):(s'=8) + (PX_0_24):(s'=2) + (PX_0_25):(s'=1); 
 [] s=1 -> (PX_1_8):(s'=8) + (PX_1_9):(s'=9); 
 [] s=2 -> (PX_2_10):(s'=1) + (PX_2_11):(s'=8) + (PX_2_23):(s'=0); 
 [] s=3 -> (PX_3_12):(s'=1) + (PX_3_13):(s'=8); 
 [] s=4 -> (PX_4_14):(s'=1) + (PX_4_15):(s'=8); 
 [] s=5 -> (PX_5_16):(s'=1) + (PX_5_17):(s'=8); 
 [] s=6 -> (PX_6_18):(s'=1) + (PX_6_19):(s'=8); 
 [] s=7 -> (PX_7_20):(s'=1) + (PX_7_21):(s'=8); 
 [] s=8 -> (PX_8_6):(s'=8); 
 [] s=9 -> (PX_9_7):(s'=0); 
 
endmodule
 