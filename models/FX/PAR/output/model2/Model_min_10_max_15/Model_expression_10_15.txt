Min_number = ( 10 ) ; Max_number = ( 15 )
In original model number_of_states = ( 40 ); number_of_transition = ( 63 ) 

Original Transition
0 --- 1  -> (x)
0 --- 4  -> ((-1)*x+1)
1 --- 16  -> (p12*p11)
1 --- 17  -> ((-1)*p12*p11+p11)
1 --- 18  -> ((-1)*p12*p11+p12)
1 --- 19  -> (p12*p11-p11-p12+1)
2 --- 20  -> (p22*p21)
2 --- 21  -> ((-1)*p22*p21+p21)
2 --- 22  -> ((-1)*p22*p21+p22)
2 --- 23  -> (p22*p21-p21-p22+1)
3 --- 24  -> (p32*p31)
3 --- 25  -> ((-1)*p32*p31+p31)
3 --- 26  -> ((-1)*p32*p31+p32)
3 --- 27  -> (p32*p31-p31-p32+1)
4 --- 28  -> (p42*p41)
4 --- 29  -> ((-1)*p42*p41+p41)
4 --- 30  -> ((-1)*p42*p41+p42)
4 --- 31  -> (p42*p41-p41-p42+1)
5 --- 32  -> (p52*p51)
5 --- 33  -> ((-1)*p52*p51+p51)
5 --- 34  -> ((-1)*p52*p51+p52)
5 --- 35  -> (p52*p51-p51-p52+1)
6 --- 36  -> (p62*p61)
6 --- 37  -> ((-1)*p62*p61+p61)
6 --- 38  -> ((-1)*p62*p61+p62)
6 --- 39  -> (p62*p61-p61-p62+1)
7 --- 1  -> (y2)
7 --- 3  -> ((-1)*y1-y2+1)
7 --- 5  -> (y1)
8 --- 0  -> (z2)
8 --- 4  -> ((-1)*z1-z2+1)
8 --- 5  -> (z1)
9 --- 9  -> (1)
10 --- 10  -> (1)
11 --- 11  -> (1)
12 --- 12  -> (1)
13 --- 13  -> (1)
14 --- 14  -> (1)
15 --- 0  -> (1)
16 --- 2  -> (1)
17 --- 2  -> (1)
18 --- 2  -> (1)
19 --- 14  -> (1)
20 --- 7  -> (1)
21 --- 7  -> (1)
22 --- 7  -> (1)
23 --- 13  -> (1)
24 --- 6  -> (1)
25 --- 6  -> (1)
26 --- 6  -> (1)
27 --- 12  -> (1)
28 --- 8  -> (1)
29 --- 8  -> (1)
30 --- 8  -> (1)
31 --- 11  -> (1)
32 --- 6  -> (1)
33 --- 6  -> (1)
34 --- 6  -> (1)
35 --- 10  -> (1)
36 --- 15  -> (1)
37 --- 15  -> (1)
38 --- 15  -> (1)
39 --- 9  -> (1)


In New Model number of states = ( 41 ); number of transition = ( 64 ) 

New transition
0 --- 1  -> (x)
0 --- 4  -> ((-1)*x+1)
1 --- 16  -> (p12*p11)
1 --- 17  -> ((-1)*p12*p11+p11)
1 --- 18  -> ((-1)*p12*p11+p12)
1 --- 19  -> (p12*p11-p11-p12+1)
2 --- 20  -> (p22*p21)
2 --- 21  -> ((-1)*p22*p21+p21)
2 --- 22  -> ((-1)*p22*p21+p22)
3 --- 24  -> (p32*p31)
3 --- 25  -> ((-1)*p32*p31+p31)
3 --- 26  -> ((-1)*p32*p31+p32)
3 --- 27  -> (p32*p31-p31-p32+1)
4 --- 28  -> (p42*p41)
4 --- 29  -> ((-1)*p42*p41+p41)
4 --- 30  -> ((-1)*p42*p41+p42)
4 --- 31  -> (p42*p41-p41-p42+1)
5 --- 32  -> (p52*p51)
5 --- 33  -> ((-1)*p52*p51+p51)
5 --- 34  -> ((-1)*p52*p51+p52)
5 --- 35  -> (p52*p51-p51-p52+1)
6 --- 36  -> (p62*p61)
6 --- 37  -> ((-1)*p62*p61+p61)
6 --- 38  -> ((-1)*p62*p61+p62)
6 --- 39  -> (p62*p61-p61-p62+1)
7 --- 1  -> (y2)
7 --- 3  -> ((-1)*y1-y2+1)
7 --- 5  -> (y1)
8 --- 0  -> (z2)
8 --- 4  -> ((-1)*z1-z2+1)
8 --- 5  -> (z1)
9 --- 9  -> (1)
10 --- 10  -> (1)
11 --- 11  -> (1)
12 --- 12  -> (1)
13 --- 13  -> (1)
14 --- 14  -> (1)
15 --- 0  -> (1)
16 --- 2  -> (1)
17 --- 2  -> (1)
18 --- 2  -> (1)
19 --- 14  -> (1)
20 --- 7  -> (1)
21 --- 7  -> (1)
22 --- 7  -> (1)
23 --- 13  -> (1)
24 --- 6  -> (1)
25 --- 6  -> (1)
26 --- 6  -> (1)
27 --- 12  -> (1)
28 --- 8  -> (1)
29 --- 8  -> (1)
30 --- 8  -> (1)
31 --- 11  -> (1)
32 --- 6  -> (1)
33 --- 6  -> (1)
34 --- 6  -> (1)
35 --- 10  -> (1)
36 --- 15  -> (1)
37 --- 15  -> (1)
38 --- 15  -> (1)
39 --- 9  -> (1)
2 --- 40  -> (p22*p21-p21-p22+1)
40 --- 23  -> 1


State--Fragment Number--visited--startingPoint--endingPoint
   0          1          true        true          false
   1          1          true        false          false
   2          1          true        false          false
   3          1          true        false          true
   4          1          true        false          false
   5          1          true        false          true
   6          2          true        true          false
   7          1          true        false          false
   8          1          true        false          false
   9          12          true        true          true
   10          13          true        true          true
   11          14          true        true          true
   12          15          true        true          true
   13          16          true        true          true
   14          17          true        true          true
   15          18          true        true          true
   16          1          true        false          false
   17          1          true        false          false
   18          1          true        false          false
   19          1          true        false          true
   20          1          true        false          false
   21          1          true        false          false
   22          1          true        false          false
   23          3          true        true          true
   24          4          true        true          true
   25          5          true        true          true
   26          6          true        true          true
   27          7          true        true          true
   28          1          true        false          false
   29          1          true        false          false
   30          1          true        false          false
   31          1          true        false          true
   32          8          true        true          true
   33          9          true        true          true
   34          10          true        true          true
   35          11          true        true          true
   36          2          true        false          true
   37          2          true        false          true
   38          2          true        false          true
   39          2          true        false          true
   40          1          true        false          true

This is transition in Fragment (1) 
    [0, 1]  (x)
    [0, 4]  ((-1)*x+1)
    [1, 16]  (p12*p11)
    [1, 17]  ((-1)*p12*p11+p11)
    [1, 18]  ((-1)*p12*p11+p12)
    [1, 19]  (p12*p11-p11-p12+1)
    [2, 20]  (p22*p21)
    [2, 21]  ((-1)*p22*p21+p21)
    [2, 22]  ((-1)*p22*p21+p22)
    [4, 28]  (p42*p41)
    [4, 29]  ((-1)*p42*p41+p41)
    [4, 30]  ((-1)*p42*p41+p42)
    [4, 31]  (p42*p41-p41-p42+1)
    [7, 1]  (y2)
    [7, 3]  ((-1)*y1-y2+1)
    [7, 5]  (y1)
    [8, 0]  (z2)
    [8, 4]  ((-1)*z1-z2+1)
    [8, 5]  (z1)
    [16, 2]  (1)
    [17, 2]  (1)
    [18, 2]  (1)
    [20, 7]  (1)
    [21, 7]  (1)
    [22, 7]  (1)
    [28, 8]  (1)
    [29, 8]  (1)
    [30, 8]  (1)
    [2, 40]  (p22*p21-p21-p22+1)
    [3, 3]  1
    [5, 5]  1
    [19, 19]  1
    [31, 31]  1
    [40, 40]  1

This is transition in Fragment (2) 
    [6, 36]  (p62*p61)
    [6, 37]  ((-1)*p62*p61+p61)
    [6, 38]  ((-1)*p62*p61+p62)
    [6, 39]  (p62*p61-p61-p62+1)
    [36, 36]  1
    [37, 37]  1
    [38, 38]  1
    [39, 39]  1

This is transition in Fragment (3) 
    [23, 23]  1

This is transition in Fragment (4) 
    [24, 24]  1

This is transition in Fragment (5) 
    [25, 25]  1

This is transition in Fragment (6) 
    [26, 26]  1

This is transition in Fragment (7) 
    [27, 27]  1

This is transition in Fragment (8) 
    [32, 32]  1

This is transition in Fragment (9) 
    [33, 33]  1

This is transition in Fragment (10) 
    [34, 34]  1

This is transition in Fragment (11) 
    [35, 35]  1

This is transition in Fragment (12) 
    [9, 9]  1

This is transition in Fragment (13) 
    [10, 10]  1

This is transition in Fragment (14) 
    [11, 11]  1

This is transition in Fragment (15) 
    [12, 12]  1

This is transition in Fragment (16) 
    [13, 13]  1

This is transition in Fragment (17) 
    [14, 14]  1

This is transition in Fragment (18) 
    [15, 15]  1

This is transition for abstract model 
    [3, 24]  ( (p32*p31) ) * ( prob_f1_s3 )
    [3, 25]  ( ((-1)*p32*p31+p31) ) * ( prob_f1_s3 )
    [3, 26]  ( ((-1)*p32*p31+p32) ) * ( prob_f1_s3 )
    [3, 27]  ( (p32*p31-p31-p32+1) ) * ( prob_f1_s3 )
    [5, 32]  ( (p52*p51) ) * ( prob_f1_s5 )
    [5, 33]  ( ((-1)*p52*p51+p51) ) * ( prob_f1_s5 )
    [5, 34]  ( ((-1)*p52*p51+p52) ) * ( prob_f1_s5 )
    [5, 35]  ( (p52*p51-p51-p52+1) ) * ( prob_f1_s5 )
    [9, 9]  (1)
    [10, 10]  (1)
    [11, 11]  (1)
    [12, 12]  (1)
    [13, 13]  (1)
    [14, 14]  (1)
    [15, 0]  (1)
    [19, 14]  ( (1) ) * ( prob_f1_s19 )
    [23, 13]  (1)
    [24, 6]  (1)
    [25, 6]  (1)
    [26, 6]  (1)
    [27, 12]  (1)
    [31, 11]  ( (1) ) * ( prob_f1_s31 )
    [32, 6]  (1)
    [33, 6]  (1)
    [34, 6]  (1)
    [35, 10]  (1)
    [36, 15]  ( (1) ) * ( prob_f2_s36 )
    [37, 15]  ( (1) ) * ( prob_f2_s37 )
    [38, 15]  ( (1) ) * ( prob_f2_s38 )
    [39, 9]  ( (1) ) * ( prob_f2_s39 )
    [40, 23]  ( 1 ) * ( prob_f1_s40 )
prob_f1_s3  =(  x * z1 * p22 * p42 * p21 * p41 * y1 * p11 * p12 + z2 * x * p22 * p42 * p21 * p41 * y1 * p11 * p12 + x * z1 * p22 * p42 * p21 * p41 * y2 * p11 * p12 + z2 * x * p22 * p42 * p21 * p41 * y2 * p11 * p12 - x * p22 * p42 * p21 * p41 * y1 * p11 * p12 - x * z1 * p42 * p21 * p41 * y1 * p11 * p12 - z2 * x * p42 * p21 * p41 * y1 * p11 * p12 - x * z1 * p22 * p21 * p41 * y1 * p11 * p12 - z2 * x * p22 * p21 * p41 * y1 * p11 * p12 - x * z1 * p22 * p42 * p41 * y1 * p11 * p12 - z2 * x * p22 * p42 * p41 * y1 * p11 * p12 - x * z1 * p22 * p42 * p21 * y1 * p11 * p12 - z2 * x * p22 * p42 * p21 * y1 * p11 * p12 - x * p22 * p42 * p21 * p41 * y2 * p11 * p12 - x * z1 * p42 * p21 * p41 * y2 * p11 * p12 - z2 * x * p42 * p21 * p41 * y2 * p11 * p12 - x * z1 * p22 * p21 * p41 * y2 * p11 * p12 - z2 * x * p22 * p21 * p41 * y2 * p11 * p12 - x * z1 * p22 * p42 * p41 * y2 * p11 * p12 - z2 * x * p22 * p42 * p41 * y2 * p11 * p12 - x * z1 * p22 * p42 * p21 * y2 * p11 * p12 - z2 * x * p22 * p42 * p21 * y2 * p11 * p12 - x * z1 * p22 * p42 * p21 * p41 * p11 * p12 - z2 * x * p22 * p42 * p21 * p41 * p11 * p12 - x * z1 * p22 * p42 * p21 * p41 * y1 * p12 - z2 * x * p22 * p42 * p21 * p41 * y1 * p12 - x * z1 * p22 * p42 * p21 * p41 * y2 * p12 - z2 * x * p22 * p42 * p21 * p41 * y2 * p12 - x * z1 * p22 * p42 * p21 * p41 * y1 * p11 - z2 * x * p22 * p42 * p21 * p41 * y1 * p11 - x * z1 * p22 * p42 * p21 * p41 * y2 * p11 - z2 * x * p22 * p42 * p21 * p41 * y2 * p11 + x * p42 * p21 * p41 * y1 * p11 * p12 + x * p22 * p21 * p41 * y1 * p11 * p12 + x * z1 * p21 * p41 * y1 * p11 * p12 + z2 * x * p21 * p41 * y1 * p11 * p12 + x * p22 * p42 * p41 * y1 * p11 * p12 + x * z1 * p22 * p41 * y1 * p11 * p12 + z2 * x * p22 * p41 * y1 * p11 * p12 + x * p22 * p42 * p21 * y1 * p11 * p12 + x * z1 * p42 * p21 * y1 * p11 * p12 + z2 * x * p42 * p21 * y1 * p11 * p12 + x * z1 * p22 * p42 * y1 * p11 * p12 + z2 * x * p22 * p42 * y1 * p11 * p12 + x * p42 * p21 * p41 * y2 * p11 * p12 + x * p22 * p21 * p41 * y2 * p11 * p12 + x * z1 * p21 * p41 * y2 * p11 * p12 + z2 * x * p21 * p41 * y2 * p11 * p12 + x * p22 * p42 * p41 * y2 * p11 * p12 + x * z1 * p22 * p41 * y2 * p11 * p12 + z2 * x * p22 * p41 * y2 * p11 * p12 + x * p22 * p42 * p21 * y2 * p11 * p12 + x * z1 * p42 * p21 * y2 * p11 * p12 + z2 * x * p42 * p21 * y2 * p11 * p12 + x * z1 * p22 * p42 * y2 * p11 * p12 + z2 * x * p22 * p42 * y2 * p11 * p12 + x * p22 * p42 * p21 * p41 * p11 * p12 + x * z1 * p42 * p21 * p41 * p11 * p12 + z2 * x * p42 * p21 * p41 * p11 * p12 + x * z1 * p22 * p21 * p41 * p11 * p12 + z2 * x * p22 * p21 * p41 * p11 * p12 + x * z1 * p22 * p42 * p41 * p11 * p12 + z2 * x * p22 * p42 * p41 * p11 * p12 + x * z1 * p22 * p42 * p21 * p11 * p12 + z2 * x * p22 * p42 * p21 * p11 * p12 + x * p22 * p42 * p21 * p41 * y1 * p12 + x * z1 * p42 * p21 * p41 * y1 * p12 + z2 * x * p42 * p21 * p41 * y1 * p12 + x * z1 * p22 * p21 * p41 * y1 * p12 + z2 * x * p22 * p21 * p41 * y1 * p12 + x * z1 * p22 * p42 * p41 * y1 * p12 + z2 * x * p22 * p42 * p41 * y1 * p12 + x * z1 * p22 * p42 * p21 * y1 * p12 + z2 * x * p22 * p42 * p21 * y1 * p12 + x * p22 * p42 * p21 * p41 * y2 * p12 + x * z1 * p42 * p21 * p41 * y2 * p12 + z2 * x * p42 * p21 * p41 * y2 * p12 + x * z1 * p22 * p21 * p41 * y2 * p12 + z2 * x * p22 * p21 * p41 * y2 * p12 + x * z1 * p22 * p42 * p41 * y2 * p12 + z2 * x * p22 * p42 * p41 * y2 * p12 + x * z1 * p22 * p42 * p21 * y2 * p12 + z2 * x * p22 * p42 * p21 * y2 * p12 + x * z1 * p22 * p42 * p21 * p41 * p12 + z2 * x * p22 * p42 * p21 * p41 * p12 + x * p22 * p42 * p21 * p41 * y1 * p11 + x * z1 * p42 * p21 * p41 * y1 * p11 + z2 * x * p42 * p21 * p41 * y1 * p11 + x * z1 * p22 * p21 * p41 * y1 * p11 + z2 * x * p22 * p21 * p41 * y1 * p11 + x * z1 * p22 * p42 * p41 * y1 * p11 + z2 * x * p22 * p42 * p41 * y1 * p11 + x * z1 * p22 * p42 * p21 * y1 * p11 + z2 * x * p22 * p42 * p21 * y1 * p11 + x * p22 * p42 * p21 * p41 * y2 * p11 + x * z1 * p42 * p21 * p41 * y2 * p11 + z2 * x * p42 * p21 * p41 * y2 * p11 + x * z1 * p22 * p21 * p41 * y2 * p11 + z2 * x * p22 * p21 * p41 * y2 * p11 + x * z1 * p22 * p42 * p41 * y2 * p11 + z2 * x * p22 * p42 * p41 * y2 * p11 + x * z1 * p22 * p42 * p21 * y2 * p11 + z2 * x * p22 * p42 * p21 * y2 * p11 + x * z1 * p22 * p42 * p21 * p41 * p11 + z2 * x * p22 * p42 * p21 * p41 * p11 - x * p21 * p41 * y1 * p11 * p12 - x * p22 * p41 * y1 * p11 * p12 - x * p42 * p21 * y1 * p11 * p12 - x * p22 * p21 * y1 * p11 * p12 - x * p22 * p42 * y1 * p11 * p12 - x * p21 * p41 * y2 * p11 * p12 - x * p22 * p41 * y2 * p11 * p12 - x * p42 * p21 * y2 * p11 * p12 - x * p22 * p21 * y2 * p11 * p12 - x * p22 * p42 * y2 * p11 * p12 - x * p42 * p21 * p41 * p11 * p12 - x * p22 * p21 * p41 * p11 * p12 - x * z1 * p21 * p41 * p11 * p12 - z2 * x * p21 * p41 * p11 * p12 - x * p22 * p42 * p41 * p11 * p12 - x * z1 * p22 * p41 * p11 * p12 - z2 * x * p22 * p41 * p11 * p12 - x * p22 * p42 * p21 * p11 * p12 - x * z1 * p42 * p21 * p11 * p12 - z2 * x * p42 * p21 * p11 * p12 - x * z1 * p22 * p42 * p11 * p12 - z2 * x * p22 * p42 * p11 * p12 - x * p42 * p21 * p41 * y1 * p12 - x * p22 * p21 * p41 * y1 * p12 - x * z1 * p21 * p41 * y1 * p12 - z2 * x * p21 * p41 * y1 * p12 - x * p22 * p42 * p41 * y1 * p12 - x * z1 * p22 * p41 * y1 * p12 - z2 * x * p22 * p41 * y1 * p12 - x * p22 * p42 * p21 * y1 * p12 - x * z1 * p42 * p21 * y1 * p12 - z2 * x * p42 * p21 * y1 * p12 - x * z1 * p22 * p42 * y1 * p12 - z2 * x * p22 * p42 * y1 * p12 - x * p42 * p21 * p41 * y2 * p12 - x * p22 * p21 * p41 * y2 * p12 - x * z1 * p21 * p41 * y2 * p12 - z2 * x * p21 * p41 * y2 * p12 - x * p22 * p42 * p41 * y2 * p12 - x * z1 * p22 * p41 * y2 * p12 - z2 * x * p22 * p41 * y2 * p12 - x * p22 * p42 * p21 * y2 * p12 - x * z1 * p42 * p21 * y2 * p12 - z2 * x * p42 * p21 * y2 * p12 - x * z1 * p22 * p42 * y2 * p12 - z2 * x * p22 * p42 * y2 * p12 - x * p22 * p42 * p21 * p41 * p12 - x * z1 * p42 * p21 * p41 * p12 - z2 * x * p42 * p21 * p41 * p12 - x * z1 * p22 * p21 * p41 * p12 - z2 * x * p22 * p21 * p41 * p12 - x * z1 * p22 * p42 * p41 * p12 - z2 * x * p22 * p42 * p41 * p12 - x * z1 * p22 * p42 * p21 * p12 - z2 * x * p22 * p42 * p21 * p12 - x * p42 * p21 * p41 * y1 * p11 - x * p22 * p21 * p41 * y1 * p11 - x * z1 * p21 * p41 * y1 * p11 - z2 * x * p21 * p41 * y1 * p11 - x * p22 * p42 * p41 * y1 * p11 - x * z1 * p22 * p41 * y1 * p11 - z2 * x * p22 * p41 * y1 * p11 - x * p22 * p42 * p21 * y1 * p11 - x * z1 * p42 * p21 * y1 * p11 - z2 * x * p42 * p21 * y1 * p11 - x * z1 * p22 * p42 * y1 * p11 - z2 * x * p22 * p42 * y1 * p11 - x * p42 * p21 * p41 * y2 * p11 - x * p22 * p21 * p41 * y2 * p11 - x * z1 * p21 * p41 * y2 * p11 - z2 * x * p21 * p41 * y2 * p11 - x * p22 * p42 * p41 * y2 * p11 - x * z1 * p22 * p41 * y2 * p11 - z2 * x * p22 * p41 * y2 * p11 - x * p22 * p42 * p21 * y2 * p11 - x * z1 * p42 * p21 * y2 * p11 - z2 * x * p42 * p21 * y2 * p11 - x * z1 * p22 * p42 * y2 * p11 - z2 * x * p22 * p42 * y2 * p11 - x * p22 * p42 * p21 * p41 * p11 - x * z1 * p42 * p21 * p41 * p11 - z2 * x * p42 * p21 * p41 * p11 - x * z1 * p22 * p21 * p41 * p11 - z2 * x * p22 * p21 * p41 * p11 - x * z1 * p22 * p42 * p41 * p11 - z2 * x * p22 * p42 * p41 * p11 - x * z1 * p22 * p42 * p21 * p11 - z2 * x * p22 * p42 * p21 * p11 + x * p21 * y1 * p11 * p12 + x * p22 * y1 * p11 * p12 + x * p21 * y2 * p11 * p12 + x * p22 * y2 * p11 * p12 + x * p21 * p41 * p11 * p12 + x * p22 * p41 * p11 * p12 + x * p42 * p21 * p11 * p12 + x * p22 * p21 * p11 * p12 + x * p22 * p42 * p11 * p12 + x * p21 * p41 * y1 * p12 + x * p22 * p41 * y1 * p12 + x * p42 * p21 * y1 * p12 + x * p22 * p21 * y1 * p12 + x * p22 * p42 * y1 * p12 + x * p21 * p41 * y2 * p12 + x * p22 * p41 * y2 * p12 + x * p42 * p21 * y2 * p12 + x * p22 * p21 * y2 * p12 + x * p22 * p42 * y2 * p12 + x * p42 * p21 * p41 * p12 + x * p22 * p21 * p41 * p12 + x * z1 * p21 * p41 * p12 + z2 * x * p21 * p41 * p12 + x * p22 * p42 * p41 * p12 + x * z1 * p22 * p41 * p12 + z2 * x * p22 * p41 * p12 + x * p22 * p42 * p21 * p12 + x * z1 * p42 * p21 * p12 + z2 * x * p42 * p21 * p12 + x * z1 * p22 * p42 * p12 + z2 * x * p22 * p42 * p12 + x * p21 * p41 * y1 * p11 + x * p22 * p41 * y1 * p11 + x * p42 * p21 * y1 * p11 + x * p22 * p21 * y1 * p11 + x * p22 * p42 * y1 * p11 + x * p21 * p41 * y2 * p11 + x * p22 * p41 * y2 * p11 + x * p42 * p21 * y2 * p11 + x * p22 * p21 * y2 * p11 + x * p22 * p42 * y2 * p11 + x * p42 * p21 * p41 * p11 + x * p22 * p21 * p41 * p11 + x * z1 * p21 * p41 * p11 + z2 * x * p21 * p41 * p11 + x * p22 * p42 * p41 * p11 + x * z1 * p22 * p41 * p11 + z2 * x * p22 * p41 * p11 + x * p22 * p42 * p21 * p11 + x * z1 * p42 * p21 * p11 + z2 * x * p42 * p21 * p11 + x * z1 * p22 * p42 * p11 + z2 * x * p22 * p42 * p11 - x * p21 * p11 * p12 - x * p22 * p11 * p12 - x * p21 * y1 * p12 - x * p22 * y1 * p12 - x * p21 * y2 * p12 - x * p22 * y2 * p12 - x * p21 * p41 * p12 - x * p22 * p41 * p12 - x * p42 * p21 * p12 - x * p22 * p21 * p12 - x * p22 * p42 * p12 - x * p21 * y1 * p11 - x * p22 * y1 * p11 - x * p21 * y2 * p11 - x * p22 * y2 * p11 - x * p21 * p41 * p11 - x * p22 * p41 * p11 - x * p42 * p21 * p11 - x * p22 * p21 * p11 - x * p22 * p42 * p11 + x * p21 * p12 + x * p22 * p12 + x * p21 * p11 + x * p22 * p11 ) / ( z2 * x * p22 * p42 * p21 * p41 * y2 * p11 * p12 + z1 * p22 * p42 * p21 * p41 * y2 * p11 * p12 - z2 * x * p42 * p21 * p41 * y2 * p11 * p12 - z2 * x * p22 * p21 * p41 * y2 * p11 * p12 - z2 * x * p22 * p42 * p41 * y2 * p11 * p12 - z2 * x * p22 * p42 * p21 * y2 * p11 * p12 - z2 * x * p22 * p42 * p21 * p41 * y2 * p12 - z2 * x * p22 * p42 * p21 * p41 * y2 * p11 - p22 * p42 * p21 * p41 * y2 * p11 * p12 - z1 * p42 * p21 * p41 * y2 * p11 * p12 - z1 * p22 * p21 * p41 * y2 * p11 * p12 + z2 * x * p21 * p41 * y2 * p11 * p12 - z1 * p22 * p42 * p41 * y2 * p11 * p12 + z2 * x * p22 * p41 * y2 * p11 * p12 - z1 * p22 * p42 * p21 * y2 * p11 * p12 + z2 * x * p42 * p21 * y2 * p11 * p12 + z2 * x * p22 * p42 * y2 * p11 * p12 - z1 * p22 * p42 * p21 * p41 * y2 * p12 + z2 * x * p42 * p21 * p41 * y2 * p12 + z2 * x * p22 * p21 * p41 * y2 * p12 + z2 * x * p22 * p42 * p41 * y2 * p12 + z2 * x * p22 * p42 * p21 * y2 * p12 - z1 * p22 * p42 * p21 * p41 * y2 * p11 + z2 * x * p42 * p21 * p41 * y2 * p11 + z2 * x * p22 * p21 * p41 * y2 * p11 + z2 * x * p22 * p42 * p41 * y2 * p11 + z2 * x * p22 * p42 * p21 * y2 * p11 + p42 * p21 * p41 * y2 * p11 * p12 + p22 * p21 * p41 * y2 * p11 * p12 + z1 * p21 * p41 * y2 * p11 * p12 + p22 * p42 * p41 * y2 * p11 * p12 + z1 * p22 * p41 * y2 * p11 * p12 + p22 * p42 * p21 * y2 * p11 * p12 + z1 * p42 * p21 * y2 * p11 * p12 + z1 * p22 * p42 * y2 * p11 * p12 + p22 * p42 * p21 * p41 * y2 * p12 + z1 * p42 * p21 * p41 * y2 * p12 + z1 * p22 * p21 * p41 * y2 * p12 - z2 * x * p21 * p41 * y2 * p12 + z1 * p22 * p42 * p41 * y2 * p12 - z2 * x * p22 * p41 * y2 * p12 + z1 * p22 * p42 * p21 * y2 * p12 - z2 * x * p42 * p21 * y2 * p12 - z2 * x * p22 * p42 * y2 * p12 + p22 * p42 * p21 * p41 * y2 * p11 + z1 * p42 * p21 * p41 * y2 * p11 + z1 * p22 * p21 * p41 * y2 * p11 - z2 * x * p21 * p41 * y2 * p11 + z1 * p22 * p42 * p41 * y2 * p11 - z2 * x * p22 * p41 * y2 * p11 + z1 * p22 * p42 * p21 * y2 * p11 - z2 * x * p42 * p21 * y2 * p11 - z2 * x * p22 * p42 * y2 * p11 - p21 * p41 * y2 * p11 * p12 - p22 * p41 * y2 * p11 * p12 - p42 * p21 * y2 * p11 * p12 - p22 * p21 * y2 * p11 * p12 - p22 * p42 * y2 * p11 * p12 - p42 * p21 * p41 * y2 * p12 - p22 * p21 * p41 * y2 * p12 - z1 * p21 * p41 * y2 * p12 - p22 * p42 * p41 * y2 * p12 - z1 * p22 * p41 * y2 * p12 - p22 * p42 * p21 * y2 * p12 - z1 * p42 * p21 * y2 * p12 - z1 * p22 * p42 * y2 * p12 - p42 * p21 * p41 * y2 * p11 - p22 * p21 * p41 * y2 * p11 - z1 * p21 * p41 * y2 * p11 - p22 * p42 * p41 * y2 * p11 - z1 * p22 * p41 * y2 * p11 - p22 * p42 * p21 * y2 * p11 - z1 * p42 * p21 * y2 * p11 - z1 * p22 * p42 * y2 * p11 + p21 * y2 * p11 * p12 + p22 * y2 * p11 * p12 + p21 * p41 * y2 * p12 + p22 * p41 * y2 * p12 + p42 * p21 * y2 * p12 + p22 * p21 * y2 * p12 + p22 * p42 * y2 * p12 + p21 * p41 * y2 * p11 + p22 * p41 * y2 * p11 + p42 * p21 * y2 * p11 + p22 * p21 * y2 * p11 + p22 * p42 * y2 * p11 - z2 * x * p42 * p41 - p21 * y2 * p12 - p22 * y2 * p12 - p21 * y2 * p11 - p22 * y2 * p11 - z1 * p42 * p41 + z2 * x * p41 + z2 * x * p42 + p42 * p41 + z1 * p41 + z1 * p42 - p41 - p42 + 1  ); 
prob_f1_s5  =(  (-1)* x * z1 * p22 * p42 * p21 * p41 * y1 * p11 * p12 - z2 * x * p22 * p42 * p21 * p41 * y1 * p11 * p12 - x * z1 * p22 * p42 * p21 * p41 * y2 * p11 * p12 + x * p22 * p42 * p21 * p41 * y1 * p11 * p12 + x * z1 * p42 * p21 * p41 * y1 * p11 * p12 + z2 * x * p42 * p21 * p41 * y1 * p11 * p12 + x * z1 * p22 * p21 * p41 * y1 * p11 * p12 + z2 * x * p22 * p21 * p41 * y1 * p11 * p12 + x * z1 * p22 * p42 * p41 * y1 * p11 * p12 + z2 * x * p22 * p42 * p41 * y1 * p11 * p12 + x * z1 * p22 * p42 * p21 * y1 * p11 * p12 + z2 * x * p22 * p42 * p21 * y1 * p11 * p12 + z1 * p22 * p42 * p21 * p41 * y2 * p11 * p12 + x * z1 * p42 * p21 * p41 * y2 * p11 * p12 + x * z1 * p22 * p21 * p41 * y2 * p11 * p12 + x * z1 * p22 * p42 * p41 * y2 * p11 * p12 + x * z1 * p22 * p42 * p21 * y2 * p11 * p12 + x * z1 * p22 * p42 * p21 * p41 * y1 * p12 + z2 * x * p22 * p42 * p21 * p41 * y1 * p12 + x * z1 * p22 * p42 * p21 * p41 * y2 * p12 + x * z1 * p22 * p42 * p21 * p41 * y1 * p11 + z2 * x * p22 * p42 * p21 * p41 * y1 * p11 + x * z1 * p22 * p42 * p21 * p41 * y2 * p11 - x * p42 * p21 * p41 * y1 * p11 * p12 - x * p22 * p21 * p41 * y1 * p11 * p12 - x * z1 * p21 * p41 * y1 * p11 * p12 - z2 * x * p21 * p41 * y1 * p11 * p12 - x * p22 * p42 * p41 * y1 * p11 * p12 - x * z1 * p22 * p41 * y1 * p11 * p12 - z2 * x * p22 * p41 * y1 * p11 * p12 - x * p22 * p42 * p21 * y1 * p11 * p12 - x * z1 * p42 * p21 * y1 * p11 * p12 - z2 * x * p42 * p21 * y1 * p11 * p12 - x * z1 * p22 * p42 * y1 * p11 * p12 - z2 * x * p22 * p42 * y1 * p11 * p12 - z1 * p42 * p21 * p41 * y2 * p11 * p12 - z1 * p22 * p21 * p41 * y2 * p11 * p12 - x * z1 * p21 * p41 * y2 * p11 * p12 - z1 * p22 * p42 * p41 * y2 * p11 * p12 - x * z1 * p22 * p41 * y2 * p11 * p12 - z1 * p22 * p42 * p21 * y2 * p11 * p12 - x * z1 * p42 * p21 * y2 * p11 * p12 - x * z1 * p22 * p42 * y2 * p11 * p12 - x * p22 * p42 * p21 * p41 * y1 * p12 - x * z1 * p42 * p21 * p41 * y1 * p12 - z2 * x * p42 * p21 * p41 * y1 * p12 - x * z1 * p22 * p21 * p41 * y1 * p12 - z2 * x * p22 * p21 * p41 * y1 * p12 - x * z1 * p22 * p42 * p41 * y1 * p12 - z2 * x * p22 * p42 * p41 * y1 * p12 - x * z1 * p22 * p42 * p21 * y1 * p12 - z2 * x * p22 * p42 * p21 * y1 * p12 - z1 * p22 * p42 * p21 * p41 * y2 * p12 - x * z1 * p42 * p21 * p41 * y2 * p12 - x * z1 * p22 * p21 * p41 * y2 * p12 - x * z1 * p22 * p42 * p41 * y2 * p12 - x * z1 * p22 * p42 * p21 * y2 * p12 - x * p22 * p42 * p21 * p41 * y1 * p11 - x * z1 * p42 * p21 * p41 * y1 * p11 - z2 * x * p42 * p21 * p41 * y1 * p11 - x * z1 * p22 * p21 * p41 * y1 * p11 - z2 * x * p22 * p21 * p41 * y1 * p11 - x * z1 * p22 * p42 * p41 * y1 * p11 - z2 * x * p22 * p42 * p41 * y1 * p11 - x * z1 * p22 * p42 * p21 * y1 * p11 - z2 * x * p22 * p42 * p21 * y1 * p11 - z1 * p22 * p42 * p21 * p41 * y2 * p11 - x * z1 * p42 * p21 * p41 * y2 * p11 - x * z1 * p22 * p21 * p41 * y2 * p11 - x * z1 * p22 * p42 * p41 * y2 * p11 - x * z1 * p22 * p42 * p21 * y2 * p11 + x * p21 * p41 * y1 * p11 * p12 + x * p22 * p41 * y1 * p11 * p12 + x * p42 * p21 * y1 * p11 * p12 + x * p22 * p21 * y1 * p11 * p12 + x * p22 * p42 * y1 * p11 * p12 + z1 * p21 * p41 * y2 * p11 * p12 + z1 * p22 * p41 * y2 * p11 * p12 + z1 * p42 * p21 * y2 * p11 * p12 + z1 * p22 * p42 * y2 * p11 * p12 + x * p42 * p21 * p41 * y1 * p12 + x * p22 * p21 * p41 * y1 * p12 + x * z1 * p21 * p41 * y1 * p12 + z2 * x * p21 * p41 * y1 * p12 + x * p22 * p42 * p41 * y1 * p12 + x * z1 * p22 * p41 * y1 * p12 + z2 * x * p22 * p41 * y1 * p12 + x * p22 * p42 * p21 * y1 * p12 + x * z1 * p42 * p21 * y1 * p12 + z2 * x * p42 * p21 * y1 * p12 + x * z1 * p22 * p42 * y1 * p12 + z2 * x * p22 * p42 * y1 * p12 + z1 * p42 * p21 * p41 * y2 * p12 + z1 * p22 * p21 * p41 * y2 * p12 + x * z1 * p21 * p41 * y2 * p12 + z1 * p22 * p42 * p41 * y2 * p12 + x * z1 * p22 * p41 * y2 * p12 + z1 * p22 * p42 * p21 * y2 * p12 + x * z1 * p42 * p21 * y2 * p12 + x * z1 * p22 * p42 * y2 * p12 + x * p42 * p21 * p41 * y1 * p11 + x * p22 * p21 * p41 * y1 * p11 + x * z1 * p21 * p41 * y1 * p11 + z2 * x * p21 * p41 * y1 * p11 + x * p22 * p42 * p41 * y1 * p11 + x * z1 * p22 * p41 * y1 * p11 + z2 * x * p22 * p41 * y1 * p11 + x * p22 * p42 * p21 * y1 * p11 + x * z1 * p42 * p21 * y1 * p11 + z2 * x * p42 * p21 * y1 * p11 + x * z1 * p22 * p42 * y1 * p11 + z2 * x * p22 * p42 * y1 * p11 + z1 * p42 * p21 * p41 * y2 * p11 + z1 * p22 * p21 * p41 * y2 * p11 + x * z1 * p21 * p41 * y2 * p11 + z1 * p22 * p42 * p41 * y2 * p11 + x * z1 * p22 * p41 * y2 * p11 + z1 * p22 * p42 * p21 * y2 * p11 + x * z1 * p42 * p21 * y2 * p11 + x * z1 * p22 * p42 * y2 * p11 - x * p21 * y1 * p11 * p12 - x * p22 * y1 * p11 * p12 - x * p21 * p41 * y1 * p12 - x * p22 * p41 * y1 * p12 - x * p42 * p21 * y1 * p12 - x * p22 * p21 * y1 * p12 - x * p22 * p42 * y1 * p12 - z1 * p21 * p41 * y2 * p12 - z1 * p22 * p41 * y2 * p12 - z1 * p42 * p21 * y2 * p12 - z1 * p22 * p42 * y2 * p12 - x * p21 * p41 * y1 * p11 - x * p22 * p41 * y1 * p11 - x * p42 * p21 * y1 * p11 - x * p22 * p21 * y1 * p11 - x * p22 * p42 * y1 * p11 - z1 * p21 * p41 * y2 * p11 - z1 * p22 * p41 * y2 * p11 - z1 * p42 * p21 * y2 * p11 - z1 * p22 * p42 * y2 * p11 + x * p21 * y1 * p12 + x * p22 * y1 * p12 + x * p21 * y1 * p11 + x * p22 * y1 * p11 + x * z1 * p42 * p41 - z1 * p42 * p41 - x * z1 * p41 - x * z1 * p42 + z1 * p41 + z1 * p42 ) / ( z2 * x * p22 * p42 * p21 * p41 * y2 * p11 * p12 + z1 * p22 * p42 * p21 * p41 * y2 * p11 * p12 - z2 * x * p42 * p21 * p41 * y2 * p11 * p12 - z2 * x * p22 * p21 * p41 * y2 * p11 * p12 - z2 * x * p22 * p42 * p41 * y2 * p11 * p12 - z2 * x * p22 * p42 * p21 * y2 * p11 * p12 - z2 * x * p22 * p42 * p21 * p41 * y2 * p12 - z2 * x * p22 * p42 * p21 * p41 * y2 * p11 - p22 * p42 * p21 * p41 * y2 * p11 * p12 - z1 * p42 * p21 * p41 * y2 * p11 * p12 - z1 * p22 * p21 * p41 * y2 * p11 * p12 + z2 * x * p21 * p41 * y2 * p11 * p12 - z1 * p22 * p42 * p41 * y2 * p11 * p12 + z2 * x * p22 * p41 * y2 * p11 * p12 - z1 * p22 * p42 * p21 * y2 * p11 * p12 + z2 * x * p42 * p21 * y2 * p11 * p12 + z2 * x * p22 * p42 * y2 * p11 * p12 - z1 * p22 * p42 * p21 * p41 * y2 * p12 + z2 * x * p42 * p21 * p41 * y2 * p12 + z2 * x * p22 * p21 * p41 * y2 * p12 + z2 * x * p22 * p42 * p41 * y2 * p12 + z2 * x * p22 * p42 * p21 * y2 * p12 - z1 * p22 * p42 * p21 * p41 * y2 * p11 + z2 * x * p42 * p21 * p41 * y2 * p11 + z2 * x * p22 * p21 * p41 * y2 * p11 + z2 * x * p22 * p42 * p41 * y2 * p11 + z2 * x * p22 * p42 * p21 * y2 * p11 + p42 * p21 * p41 * y2 * p11 * p12 + p22 * p21 * p41 * y2 * p11 * p12 + z1 * p21 * p41 * y2 * p11 * p12 + p22 * p42 * p41 * y2 * p11 * p12 + z1 * p22 * p41 * y2 * p11 * p12 + p22 * p42 * p21 * y2 * p11 * p12 + z1 * p42 * p21 * y2 * p11 * p12 + z1 * p22 * p42 * y2 * p11 * p12 + p22 * p42 * p21 * p41 * y2 * p12 + z1 * p42 * p21 * p41 * y2 * p12 + z1 * p22 * p21 * p41 * y2 * p12 - z2 * x * p21 * p41 * y2 * p12 + z1 * p22 * p42 * p41 * y2 * p12 - z2 * x * p22 * p41 * y2 * p12 + z1 * p22 * p42 * p21 * y2 * p12 - z2 * x * p42 * p21 * y2 * p12 - z2 * x * p22 * p42 * y2 * p12 + p22 * p42 * p21 * p41 * y2 * p11 + z1 * p42 * p21 * p41 * y2 * p11 + z1 * p22 * p21 * p41 * y2 * p11 - z2 * x * p21 * p41 * y2 * p11 + z1 * p22 * p42 * p41 * y2 * p11 - z2 * x * p22 * p41 * y2 * p11 + z1 * p22 * p42 * p21 * y2 * p11 - z2 * x * p42 * p21 * y2 * p11 - z2 * x * p22 * p42 * y2 * p11 - p21 * p41 * y2 * p11 * p12 - p22 * p41 * y2 * p11 * p12 - p42 * p21 * y2 * p11 * p12 - p22 * p21 * y2 * p11 * p12 - p22 * p42 * y2 * p11 * p12 - p42 * p21 * p41 * y2 * p12 - p22 * p21 * p41 * y2 * p12 - z1 * p21 * p41 * y2 * p12 - p22 * p42 * p41 * y2 * p12 - z1 * p22 * p41 * y2 * p12 - p22 * p42 * p21 * y2 * p12 - z1 * p42 * p21 * y2 * p12 - z1 * p22 * p42 * y2 * p12 - p42 * p21 * p41 * y2 * p11 - p22 * p21 * p41 * y2 * p11 - z1 * p21 * p41 * y2 * p11 - p22 * p42 * p41 * y2 * p11 - z1 * p22 * p41 * y2 * p11 - p22 * p42 * p21 * y2 * p11 - z1 * p42 * p21 * y2 * p11 - z1 * p22 * p42 * y2 * p11 + p21 * y2 * p11 * p12 + p22 * y2 * p11 * p12 + p21 * p41 * y2 * p12 + p22 * p41 * y2 * p12 + p42 * p21 * y2 * p12 + p22 * p21 * y2 * p12 + p22 * p42 * y2 * p12 + p21 * p41 * y2 * p11 + p22 * p41 * y2 * p11 + p42 * p21 * y2 * p11 + p22 * p21 * y2 * p11 + p22 * p42 * y2 * p11 - z2 * x * p42 * p41 - p21 * y2 * p12 - p22 * y2 * p12 - p21 * y2 * p11 - p22 * y2 * p11 - z1 * p42 * p41 + z2 * x * p41 + z2 * x * p42 + p42 * p41 + z1 * p41 + z1 * p42 - p41 - p42 + 1  ); 
prob_f1_s19  =(  (-1)* x * z1 * p42 * p41 * p11 * p12 - z2 * x * p42 * p41 * p11 * p12 + x * p42 * p41 * p11 * p12 + x * z1 * p41 * p11 * p12 + z2 * x * p41 * p11 * p12 + x * z1 * p42 * p11 * p12 + z2 * x * p42 * p11 * p12 + x * z1 * p42 * p41 * p12 + z2 * x * p42 * p41 * p12 + x * z1 * p42 * p41 * p11 + z2 * x * p42 * p41 * p11 - x * p41 * p11 * p12 - x * p42 * p11 * p12 - x * p42 * p41 * p12 - x * z1 * p41 * p12 - z2 * x * p41 * p12 - x * z1 * p42 * p12 - z2 * x * p42 * p12 - x * p42 * p41 * p11 - x * z1 * p41 * p11 - z2 * x * p41 * p11 - x * z1 * p42 * p11 - z2 * x * p42 * p11 - x * z1 * p42 * p41 - z2 * x * p42 * p41 + x * p11 * p12 + x * p41 * p12 + x * p42 * p12 + x * p41 * p11 + x * p42 * p11 + x * p42 * p41 + x * z1 * p41 + z2 * x * p41 + x * z1 * p42 + z2 * x * p42 - x * p12 - x * p11 - x * p41 - x * p42 + x ) / ( z2 * x * p22 * p42 * p21 * p41 * y2 * p11 * p12 + z1 * p22 * p42 * p21 * p41 * y2 * p11 * p12 - z2 * x * p42 * p21 * p41 * y2 * p11 * p12 - z2 * x * p22 * p21 * p41 * y2 * p11 * p12 - z2 * x * p22 * p42 * p41 * y2 * p11 * p12 - z2 * x * p22 * p42 * p21 * y2 * p11 * p12 - z2 * x * p22 * p42 * p21 * p41 * y2 * p12 - z2 * x * p22 * p42 * p21 * p41 * y2 * p11 - p22 * p42 * p21 * p41 * y2 * p11 * p12 - z1 * p42 * p21 * p41 * y2 * p11 * p12 - z1 * p22 * p21 * p41 * y2 * p11 * p12 + z2 * x * p21 * p41 * y2 * p11 * p12 - z1 * p22 * p42 * p41 * y2 * p11 * p12 + z2 * x * p22 * p41 * y2 * p11 * p12 - z1 * p22 * p42 * p21 * y2 * p11 * p12 + z2 * x * p42 * p21 * y2 * p11 * p12 + z2 * x * p22 * p42 * y2 * p11 * p12 - z1 * p22 * p42 * p21 * p41 * y2 * p12 + z2 * x * p42 * p21 * p41 * y2 * p12 + z2 * x * p22 * p21 * p41 * y2 * p12 + z2 * x * p22 * p42 * p41 * y2 * p12 + z2 * x * p22 * p42 * p21 * y2 * p12 - z1 * p22 * p42 * p21 * p41 * y2 * p11 + z2 * x * p42 * p21 * p41 * y2 * p11 + z2 * x * p22 * p21 * p41 * y2 * p11 + z2 * x * p22 * p42 * p41 * y2 * p11 + z2 * x * p22 * p42 * p21 * y2 * p11 + p42 * p21 * p41 * y2 * p11 * p12 + p22 * p21 * p41 * y2 * p11 * p12 + z1 * p21 * p41 * y2 * p11 * p12 + p22 * p42 * p41 * y2 * p11 * p12 + z1 * p22 * p41 * y2 * p11 * p12 + p22 * p42 * p21 * y2 * p11 * p12 + z1 * p42 * p21 * y2 * p11 * p12 + z1 * p22 * p42 * y2 * p11 * p12 + p22 * p42 * p21 * p41 * y2 * p12 + z1 * p42 * p21 * p41 * y2 * p12 + z1 * p22 * p21 * p41 * y2 * p12 - z2 * x * p21 * p41 * y2 * p12 + z1 * p22 * p42 * p41 * y2 * p12 - z2 * x * p22 * p41 * y2 * p12 + z1 * p22 * p42 * p21 * y2 * p12 - z2 * x * p42 * p21 * y2 * p12 - z2 * x * p22 * p42 * y2 * p12 + p22 * p42 * p21 * p41 * y2 * p11 + z1 * p42 * p21 * p41 * y2 * p11 + z1 * p22 * p21 * p41 * y2 * p11 - z2 * x * p21 * p41 * y2 * p11 + z1 * p22 * p42 * p41 * y2 * p11 - z2 * x * p22 * p41 * y2 * p11 + z1 * p22 * p42 * p21 * y2 * p11 - z2 * x * p42 * p21 * y2 * p11 - z2 * x * p22 * p42 * y2 * p11 - p21 * p41 * y2 * p11 * p12 - p22 * p41 * y2 * p11 * p12 - p42 * p21 * y2 * p11 * p12 - p22 * p21 * y2 * p11 * p12 - p22 * p42 * y2 * p11 * p12 - p42 * p21 * p41 * y2 * p12 - p22 * p21 * p41 * y2 * p12 - z1 * p21 * p41 * y2 * p12 - p22 * p42 * p41 * y2 * p12 - z1 * p22 * p41 * y2 * p12 - p22 * p42 * p21 * y2 * p12 - z1 * p42 * p21 * y2 * p12 - z1 * p22 * p42 * y2 * p12 - p42 * p21 * p41 * y2 * p11 - p22 * p21 * p41 * y2 * p11 - z1 * p21 * p41 * y2 * p11 - p22 * p42 * p41 * y2 * p11 - z1 * p22 * p41 * y2 * p11 - p22 * p42 * p21 * y2 * p11 - z1 * p42 * p21 * y2 * p11 - z1 * p22 * p42 * y2 * p11 + p21 * y2 * p11 * p12 + p22 * y2 * p11 * p12 + p21 * p41 * y2 * p12 + p22 * p41 * y2 * p12 + p42 * p21 * y2 * p12 + p22 * p21 * y2 * p12 + p22 * p42 * y2 * p12 + p21 * p41 * y2 * p11 + p22 * p41 * y2 * p11 + p42 * p21 * y2 * p11 + p22 * p21 * y2 * p11 + p22 * p42 * y2 * p11 - z2 * x * p42 * p41 - p21 * y2 * p12 - p22 * y2 * p12 - p21 * y2 * p11 - p22 * y2 * p11 - z1 * p42 * p41 + z2 * x * p41 + z2 * x * p42 + p42 * p41 + z1 * p41 + z1 * p42 - p41 - p42 + 1  ); 
prob_f1_s31  =(  x * p42 * p41 - p42 * p41 - x * p41 - x * p42 + p41 + p42 + x - 1  ) / ( z2 * x * p42 * p41 + z1 * p42 * p41 - z2 * x * p41 - z2 * x * p42 - p42 * p41 - z1 * p41 - z1 * p42 + p41 + p42 - 1  ); 
prob_f1_s40  =(  x * z1 * p22 * p42 * p21 * p41 * p11 * p12 + z2 * x * p22 * p42 * p21 * p41 * p11 * p12 - x * p22 * p42 * p21 * p41 * p11 * p12 - x * z1 * p42 * p21 * p41 * p11 * p12 - z2 * x * p42 * p21 * p41 * p11 * p12 - x * z1 * p22 * p21 * p41 * p11 * p12 - z2 * x * p22 * p21 * p41 * p11 * p12 - x * z1 * p22 * p42 * p41 * p11 * p12 - z2 * x * p22 * p42 * p41 * p11 * p12 - x * z1 * p22 * p42 * p21 * p11 * p12 - z2 * x * p22 * p42 * p21 * p11 * p12 - x * z1 * p22 * p42 * p21 * p41 * p12 - z2 * x * p22 * p42 * p21 * p41 * p12 - x * z1 * p22 * p42 * p21 * p41 * p11 - z2 * x * p22 * p42 * p21 * p41 * p11 + x * p42 * p21 * p41 * p11 * p12 + x * p22 * p21 * p41 * p11 * p12 + x * z1 * p21 * p41 * p11 * p12 + z2 * x * p21 * p41 * p11 * p12 + x * p22 * p42 * p41 * p11 * p12 + x * z1 * p42 * p41 * p11 * p12 + z2 * x * p42 * p41 * p11 * p12 + x * z1 * p22 * p41 * p11 * p12 + z2 * x * p22 * p41 * p11 * p12 + x * p22 * p42 * p21 * p11 * p12 + x * z1 * p42 * p21 * p11 * p12 + z2 * x * p42 * p21 * p11 * p12 + x * z1 * p22 * p42 * p11 * p12 + z2 * x * p22 * p42 * p11 * p12 + x * p22 * p42 * p21 * p41 * p12 + x * z1 * p42 * p21 * p41 * p12 + z2 * x * p42 * p21 * p41 * p12 + x * z1 * p22 * p21 * p41 * p12 + z2 * x * p22 * p21 * p41 * p12 + x * z1 * p22 * p42 * p41 * p12 + z2 * x * p22 * p42 * p41 * p12 + x * z1 * p22 * p42 * p21 * p12 + z2 * x * p22 * p42 * p21 * p12 + x * p22 * p42 * p21 * p41 * p11 + x * z1 * p42 * p21 * p41 * p11 + z2 * x * p42 * p21 * p41 * p11 + x * z1 * p22 * p21 * p41 * p11 + z2 * x * p22 * p21 * p41 * p11 + x * z1 * p22 * p42 * p41 * p11 + z2 * x * p22 * p42 * p41 * p11 + x * z1 * p22 * p42 * p21 * p11 + z2 * x * p22 * p42 * p21 * p11 - x * p21 * p41 * p11 * p12 - x * p42 * p41 * p11 * p12 - x * p22 * p41 * p11 * p12 - x * z1 * p41 * p11 * p12 - z2 * x * p41 * p11 * p12 - x * p42 * p21 * p11 * p12 - x * p22 * p21 * p11 * p12 - x * p22 * p42 * p11 * p12 - x * z1 * p42 * p11 * p12 - z2 * x * p42 * p11 * p12 - x * p42 * p21 * p41 * p12 - x * p22 * p21 * p41 * p12 - x * z1 * p21 * p41 * p12 - z2 * x * p21 * p41 * p12 - x * p22 * p42 * p41 * p12 - x * z1 * p42 * p41 * p12 - z2 * x * p42 * p41 * p12 - x * z1 * p22 * p41 * p12 - z2 * x * p22 * p41 * p12 - x * p22 * p42 * p21 * p12 - x * z1 * p42 * p21 * p12 - z2 * x * p42 * p21 * p12 - x * z1 * p22 * p42 * p12 - z2 * x * p22 * p42 * p12 - x * p42 * p21 * p41 * p11 - x * p22 * p21 * p41 * p11 - x * z1 * p21 * p41 * p11 - z2 * x * p21 * p41 * p11 - x * p22 * p42 * p41 * p11 - x * z1 * p42 * p41 * p11 - z2 * x * p42 * p41 * p11 - x * z1 * p22 * p41 * p11 - z2 * x * p22 * p41 * p11 - x * p22 * p42 * p21 * p11 - x * z1 * p42 * p21 * p11 - z2 * x * p42 * p21 * p11 - x * z1 * p22 * p42 * p11 - z2 * x * p22 * p42 * p11 + x * p41 * p11 * p12 + x * p21 * p11 * p12 + x * p42 * p11 * p12 + x * p22 * p11 * p12 + x * p21 * p41 * p12 + x * p42 * p41 * p12 + x * p22 * p41 * p12 + x * z1 * p41 * p12 + z2 * x * p41 * p12 + x * p42 * p21 * p12 + x * p22 * p21 * p12 + x * p22 * p42 * p12 + x * z1 * p42 * p12 + z2 * x * p42 * p12 + x * p21 * p41 * p11 + x * p42 * p41 * p11 + x * p22 * p41 * p11 + x * z1 * p41 * p11 + z2 * x * p41 * p11 + x * p42 * p21 * p11 + x * p22 * p21 * p11 + x * p22 * p42 * p11 + x * z1 * p42 * p11 + z2 * x * p42 * p11 - x * p11 * p12 - x * p41 * p12 - x * p21 * p12 - x * p42 * p12 - x * p22 * p12 - x * p41 * p11 - x * p21 * p11 - x * p42 * p11 - x * p22 * p11 + x * p12 + x * p11 ) / ( z2 * x * p22 * p42 * p21 * p41 * y2 * p11 * p12 + z1 * p22 * p42 * p21 * p41 * y2 * p11 * p12 - z2 * x * p42 * p21 * p41 * y2 * p11 * p12 - z2 * x * p22 * p21 * p41 * y2 * p11 * p12 - z2 * x * p22 * p42 * p41 * y2 * p11 * p12 - z2 * x * p22 * p42 * p21 * y2 * p11 * p12 - z2 * x * p22 * p42 * p21 * p41 * y2 * p12 - z2 * x * p22 * p42 * p21 * p41 * y2 * p11 - p22 * p42 * p21 * p41 * y2 * p11 * p12 - z1 * p42 * p21 * p41 * y2 * p11 * p12 - z1 * p22 * p21 * p41 * y2 * p11 * p12 + z2 * x * p21 * p41 * y2 * p11 * p12 - z1 * p22 * p42 * p41 * y2 * p11 * p12 + z2 * x * p22 * p41 * y2 * p11 * p12 - z1 * p22 * p42 * p21 * y2 * p11 * p12 + z2 * x * p42 * p21 * y2 * p11 * p12 + z2 * x * p22 * p42 * y2 * p11 * p12 - z1 * p22 * p42 * p21 * p41 * y2 * p12 + z2 * x * p42 * p21 * p41 * y2 * p12 + z2 * x * p22 * p21 * p41 * y2 * p12 + z2 * x * p22 * p42 * p41 * y2 * p12 + z2 * x * p22 * p42 * p21 * y2 * p12 - z1 * p22 * p42 * p21 * p41 * y2 * p11 + z2 * x * p42 * p21 * p41 * y2 * p11 + z2 * x * p22 * p21 * p41 * y2 * p11 + z2 * x * p22 * p42 * p41 * y2 * p11 + z2 * x * p22 * p42 * p21 * y2 * p11 + p42 * p21 * p41 * y2 * p11 * p12 + p22 * p21 * p41 * y2 * p11 * p12 + z1 * p21 * p41 * y2 * p11 * p12 + p22 * p42 * p41 * y2 * p11 * p12 + z1 * p22 * p41 * y2 * p11 * p12 + p22 * p42 * p21 * y2 * p11 * p12 + z1 * p42 * p21 * y2 * p11 * p12 + z1 * p22 * p42 * y2 * p11 * p12 + p22 * p42 * p21 * p41 * y2 * p12 + z1 * p42 * p21 * p41 * y2 * p12 + z1 * p22 * p21 * p41 * y2 * p12 - z2 * x * p21 * p41 * y2 * p12 + z1 * p22 * p42 * p41 * y2 * p12 - z2 * x * p22 * p41 * y2 * p12 + z1 * p22 * p42 * p21 * y2 * p12 - z2 * x * p42 * p21 * y2 * p12 - z2 * x * p22 * p42 * y2 * p12 + p22 * p42 * p21 * p41 * y2 * p11 + z1 * p42 * p21 * p41 * y2 * p11 + z1 * p22 * p21 * p41 * y2 * p11 - z2 * x * p21 * p41 * y2 * p11 + z1 * p22 * p42 * p41 * y2 * p11 - z2 * x * p22 * p41 * y2 * p11 + z1 * p22 * p42 * p21 * y2 * p11 - z2 * x * p42 * p21 * y2 * p11 - z2 * x * p22 * p42 * y2 * p11 - p21 * p41 * y2 * p11 * p12 - p22 * p41 * y2 * p11 * p12 - p42 * p21 * y2 * p11 * p12 - p22 * p21 * y2 * p11 * p12 - p22 * p42 * y2 * p11 * p12 - p42 * p21 * p41 * y2 * p12 - p22 * p21 * p41 * y2 * p12 - z1 * p21 * p41 * y2 * p12 - p22 * p42 * p41 * y2 * p12 - z1 * p22 * p41 * y2 * p12 - p22 * p42 * p21 * y2 * p12 - z1 * p42 * p21 * y2 * p12 - z1 * p22 * p42 * y2 * p12 - p42 * p21 * p41 * y2 * p11 - p22 * p21 * p41 * y2 * p11 - z1 * p21 * p41 * y2 * p11 - p22 * p42 * p41 * y2 * p11 - z1 * p22 * p41 * y2 * p11 - p22 * p42 * p21 * y2 * p11 - z1 * p42 * p21 * y2 * p11 - z1 * p22 * p42 * y2 * p11 + p21 * y2 * p11 * p12 + p22 * y2 * p11 * p12 + p21 * p41 * y2 * p12 + p22 * p41 * y2 * p12 + p42 * p21 * y2 * p12 + p22 * p21 * y2 * p12 + p22 * p42 * y2 * p12 + p21 * p41 * y2 * p11 + p22 * p41 * y2 * p11 + p42 * p21 * y2 * p11 + p22 * p21 * y2 * p11 + p22 * p42 * y2 * p11 - z2 * x * p42 * p41 - p21 * y2 * p12 - p22 * y2 * p12 - p21 * y2 * p11 - p22 * y2 * p11 - z1 * p42 * p41 + z2 * x * p41 + z2 * x * p42 + p42 * p41 + z1 * p41 + z1 * p42 - p41 - p42 + 1  ); 
prob_f2_s36  =(  p62 * p61 ); 
prob_f2_s37  =(  (-1)* p62 * p61 + p61 ); 
prob_f2_s38  =(  (-1)* p62 * p61 + p62 ); 
prob_f2_s39  =(  p62 * p61 - p61 - p62 + 1  ); 
Output_abstract_model =(  (-1)* prob_f1_s5 * p51 * p52 * prob_f2_s36 - prob_f1_s3 * p31 * p32 * prob_f2_s36 - prob_f1_s5 * p51 * p52 * prob_f2_s38 - prob_f1_s3 * p31 * p32 * prob_f2_s38 - prob_f1_s5 * p51 * p52 * prob_f2_s37 - prob_f1_s3 * p31 * p32 * prob_f2_s37 + prob_f1_s5 * p52 * prob_f2_s36 + prob_f1_s5 * p51 * prob_f2_s36 + prob_f1_s3 * p32 * prob_f2_s36 + prob_f1_s3 * p31 * prob_f2_s36 + prob_f1_s5 * p52 * prob_f2_s38 + prob_f1_s5 * p51 * prob_f2_s38 + prob_f1_s3 * p32 * prob_f2_s38 + prob_f1_s3 * p31 * prob_f2_s38 + prob_f1_s5 * p52 * prob_f2_s37 + prob_f1_s5 * p51 * prob_f2_s37 + prob_f1_s3 * p32 * prob_f2_s37 + prob_f1_s3 * p31 * prob_f2_s37 ) / ( prob_f1_s40 * prob_f2_s36 + prob_f1_s3 * prob_f2_s36 + prob_f1_s5 * prob_f2_s36 + prob_f1_s19 * prob_f2_s36 + prob_f1_s31 * prob_f2_s36 + prob_f1_s40 * prob_f2_s38 + prob_f1_s3 * prob_f2_s38 + prob_f1_s5 * prob_f2_s38 + prob_f1_s19 * prob_f2_s38 + prob_f1_s31 * prob_f2_s38 + prob_f1_s40 * prob_f2_s37 + prob_f1_s3 * prob_f2_s37 + prob_f1_s5 * prob_f2_s37 + prob_f1_s19 * prob_f2_s37 + prob_f1_s31 * prob_f2_s37 + prob_f2_s39 * prob_f1_s40 + prob_f2_s39 * prob_f1_s3 + prob_f2_s39 * prob_f1_s5 + prob_f1_s19 * prob_f2_s39 + prob_f1_s31 * prob_f2_s39 ); 
Original_model =(  0 ); 
