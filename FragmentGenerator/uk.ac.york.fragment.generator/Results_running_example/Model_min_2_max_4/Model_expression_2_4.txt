Min_number = ( 2 ) ; Max_number = ( 4 )
In original model number_of_states = ( 15 ); number_of_transition = ( 25 ) 

Original Transition
0 --- 1  -> ((-1)*p11+1)
0 --- 2  -> (p11)
1 --- 2  -> (p12)
1 --- 3  -> ((-1)*p12+1)
2 --- 4  -> (x)
2 --- 9  -> ((-1)*x+1)
3 --- 13  -> (1)
4 --- 5  -> (alpha1)
4 --- 6  -> ((-1)*alpha1+1)
5 --- 7  -> (p21)
5 --- 8  -> ((-1)*p21+1)
6 --- 7  -> (p22)
6 --- 8  -> ((-1)*p22+1)
7 --- 14  -> (1)
8 --- 13  -> (1)
9 --- 10  -> ((-1)*p31+1)
9 --- 12  -> (p31)
10 --- 9  -> ((-1)*r*p32+r)
10 --- 11  -> (r*p32-p32-r+1)
10 --- 12  -> (p32)
11 --- 13  -> (1)
12 --- 0  -> (y)
12 --- 14  -> ((-1)*y+1)
13 --- 13  -> (1)
14 --- 14  -> (1)


In New Model number of states = ( 15 ); number of transition = ( 25 ) 

New transition
0 --- 1  -> ((-1)*p11+1)
0 --- 2  -> (p11)
1 --- 2  -> (p12)
1 --- 3  -> ((-1)*p12+1)
2 --- 4  -> (x)
2 --- 9  -> ((-1)*x+1)
3 --- 13  -> (1)
4 --- 5  -> (alpha1)
4 --- 6  -> ((-1)*alpha1+1)
5 --- 7  -> (p21)
5 --- 8  -> ((-1)*p21+1)
6 --- 7  -> (p22)
6 --- 8  -> ((-1)*p22+1)
7 --- 14  -> (1)
8 --- 13  -> (1)
9 --- 10  -> ((-1)*p31+1)
9 --- 12  -> (p31)
10 --- 9  -> ((-1)*r*p32+r)
10 --- 11  -> (r*p32-p32-r+1)
10 --- 12  -> (p32)
11 --- 13  -> (1)
12 --- 0  -> (y)
12 --- 14  -> ((-1)*y+1)
13 --- 13  -> (1)
14 --- 14  -> (1)


State--Fragment Number--visited--startingPoint--endingPoint
   0          1          true        true          false
   1          1          true        false          false
   2          1          true        false          true
   3          1          true        false          true
   4          2          true        true          false
   5          2          true        false          true
   6          2          true        false          true
   7          3          true        true          true
   8          4          true        true          true
   9          5          true        true          false
   10          5          true        false          false
   11          5          true        false          true
   12          5          true        false          true
   13          6          true        true          true
   14          7          true        true          true

This is transition in Fragment (1) 
    [0, 1]  ((-1)*p11+1)
    [0, 2]  (p11)
    [1, 2]  (p12)
    [1, 3]  ((-1)*p12+1)
    [2, 2]  1
    [3, 3]  1

This is transition in Fragment (2) 
    [4, 5]  (alpha1)
    [4, 6]  ((-1)*alpha1+1)
    [5, 5]  1
    [6, 6]  1

This is transition in Fragment (3) 
    [7, 7]  1

This is transition in Fragment (4) 
    [8, 8]  1

This is transition in Fragment (5) 
    [9, 10]  ((-1)*p31+1)
    [9, 12]  (p31)
    [10, 9]  ((-1)*r*p32+r)
    [10, 11]  (r*p32-p32-r+1)
    [10, 12]  (p32)
    [11, 11]  1
    [12, 12]  1

This is transition in Fragment (6) 
    [13, 13]  1

This is transition in Fragment (7) 
    [14, 14]  1

This is transition for abstract model 
    [2, 4]  ( (x) ) * ( prob_f1_s2 )
    [2, 9]  ( ((-1)*x+1) ) * ( prob_f1_s2 )
    [3, 13]  ( (1) ) * ( prob_f1_s3 )
    [5, 7]  ( (p21) ) * ( prob_f2_s5 )
    [5, 8]  ( ((-1)*p21+1) ) * ( prob_f2_s5 )
    [6, 7]  ( (p22) ) * ( prob_f2_s6 )
    [6, 8]  ( ((-1)*p22+1) ) * ( prob_f2_s6 )
    [7, 14]  (1)
    [8, 13]  (1)
    [11, 13]  ( (1) ) * ( prob_f5_s11 )
    [12, 0]  ( (y) ) * ( prob_f5_s12 )
    [12, 14]  ( ((-1)*y+1) ) * ( prob_f5_s12 )
    [13, 13]  (1)
    [14, 14]  (1)
r
x
y
alpha1
p12
p11
p21
p22
p32
p31
prob_f1_s2  =(  (-1)* p11 * p12 + p12 + p11 ); 
prob_f1_s3  =(  p11 * p12 - p12 - p11 + 1  ); 
prob_f2_s5  =(  alpha1 ); 
prob_f2_s6  =(  (-1)* alpha1 + 1  ); 
prob_f5_s11  =(  p31 * p32 * r - p32 * r - p31 * r - p31 * p32 + r + p32 + p31 - 1  ) / ( p31 * p32 * r - p32 * r - p31 * r + r - 1  ); 
prob_f5_s12  =(  p31 * p32 - p32 - p31 ) / ( p31 * p32 * r - p32 * r - p31 * r + r - 1  ); 
Output_abstract_model =(  prob_f2_s5 * prob_f5_s12 * prob_f1_s2 * x * p21 + prob_f5_s11 * prob_f2_s5 * prob_f1_s2 * x * p21 + prob_f2_s6 * prob_f5_s12 * prob_f1_s2 * x * p22 + prob_f2_s6 * prob_f5_s11 * prob_f1_s2 * x * p22 + prob_f2_s5 * prob_f5_s12 * y * prob_f1_s2 * x + prob_f2_s6 * prob_f5_s12 * y * prob_f1_s2 * x - prob_f2_s5 * prob_f5_s12 * prob_f1_s2 * x - prob_f2_s6 * prob_f5_s12 * prob_f1_s2 * x - prob_f2_s5 * prob_f5_s12 * y * prob_f1_s2 - prob_f2_s6 * prob_f5_s12 * y * prob_f1_s2 + prob_f2_s5 * prob_f5_s12 * prob_f1_s2 + prob_f2_s6 * prob_f5_s12 * prob_f1_s2 ) / ( prob_f2_s5 * prob_f5_s12 * y * prob_f1_s2 * x + prob_f2_s6 * prob_f5_s12 * y * prob_f1_s2 * x - prob_f2_s5 * prob_f5_s12 * y * prob_f1_s2 - prob_f2_s6 * prob_f5_s12 * y * prob_f1_s2 + prob_f2_s5 * prob_f5_s12 * prob_f1_s2 + prob_f2_s6 * prob_f5_s12 * prob_f1_s2 + prob_f5_s11 * prob_f2_s5 * prob_f1_s2 + prob_f2_s6 * prob_f5_s11 * prob_f1_s2 + prob_f1_s3 * prob_f2_s5 * prob_f5_s12 + prob_f2_s6 * prob_f1_s3 * prob_f5_s12 + prob_f1_s3 * prob_f5_s11 * prob_f2_s5 + prob_f2_s6 * prob_f1_s3 * prob_f5_s11 ); 
Original_model =(  r * p32 * p31 * p21 * alpha1 * x * p12 * p11 - r * p32 * p31 * p22 * alpha1 * x * p12 * p11 - r * p31 * p21 * alpha1 * x * p12 * p11 - r * p32 * p21 * alpha1 * x * p12 * p11 + r * p31 * p22 * alpha1 * x * p12 * p11 + r * p32 * p22 * alpha1 * x * p12 * p11 + r * p32 * p31 * p22 * x * p12 * p11 - r * p32 * p31 * p21 * alpha1 * x * p11 + r * p32 * p31 * p22 * alpha1 * x * p11 - r * p32 * p31 * p21 * alpha1 * x * p12 + r * p32 * p31 * p22 * alpha1 * x * p12 + r * p21 * alpha1 * x * p12 * p11 - r * p22 * alpha1 * x * p12 * p11 - r * p31 * p22 * x * p12 * p11 - r * p32 * p22 * x * p12 * p11 + y * p32 * p31 * x * p12 * p11 + r * p31 * p21 * alpha1 * x * p11 + r * p32 * p21 * alpha1 * x * p11 - r * p31 * p22 * alpha1 * x * p11 - r * p32 * p22 * alpha1 * x * p11 - r * p32 * p31 * p22 * x * p11 + r * p31 * p21 * alpha1 * x * p12 + r * p32 * p21 * alpha1 * x * p12 - r * p31 * p22 * alpha1 * x * p12 - r * p32 * p22 * alpha1 * x * p12 - r * p32 * p31 * p22 * x * p12 - p21 * alpha1 * x * p12 * p11 + p22 * alpha1 * x * p12 * p11 + r * p22 * x * p12 * p11 - p32 * p31 * x * p12 * p11 - y * p31 * x * p12 * p11 - y * p32 * x * p12 * p11 - y * p32 * p31 * p12 * p11 - r * p21 * alpha1 * x * p11 + r * p22 * alpha1 * x * p11 + r * p31 * p22 * x * p11 + r * p32 * p22 * x * p11 - y * p32 * p31 * x * p11 - r * p21 * alpha1 * x * p12 + r * p22 * alpha1 * x * p12 + r * p31 * p22 * x * p12 + r * p32 * p22 * x * p12 - y * p32 * p31 * x * p12 - p22 * x * p12 * p11 + p31 * x * p12 * p11 + p32 * x * p12 * p11 + p32 * p31 * p12 * p11 + y * p31 * p12 * p11 + y * p32 * p12 * p11 + p21 * alpha1 * x * p11 - p22 * alpha1 * x * p11 - r * p22 * x * p11 + p32 * p31 * x * p11 + y * p31 * x * p11 + y * p32 * x * p11 + y * p32 * p31 * p11 + p21 * alpha1 * x * p12 - p22 * alpha1 * x * p12 - r * p22 * x * p12 + p32 * p31 * x * p12 + y * p31 * x * p12 + y * p32 * x * p12 + y * p32 * p31 * p12 - p31 * p12 * p11 - p32 * p12 * p11 + p22 * x * p11 - p31 * x * p11 - p32 * x * p11 - p32 * p31 * p11 - y * p31 * p11 - y * p32 * p11 + p22 * x * p12 - p31 * x * p12 - p32 * x * p12 - p32 * p31 * p12 - y * p31 * p12 - y * p32 * p12 + p31 * p11 + p32 * p11 + p31 * p12 + p32 * p12 ) / ( y * p32 * p31 * x * p12 * p11 - y * p31 * x * p12 * p11 - y * p32 * x * p12 * p11 - y * p32 * p31 * p12 * p11 - y * p32 * p31 * x * p11 - y * p32 * p31 * x * p12 + y * p31 * p12 * p11 + y * p32 * p12 * p11 + y * p31 * x * p11 + y * p32 * x * p11 + y * p32 * p31 * p11 + y * p31 * x * p12 + y * p32 * x * p12 + y * p32 * p31 * p12 - y * p31 * p11 - y * p32 * p11 - y * p31 * p12 - y * p32 * p12 - r * p32 * p31 + r * p31 + r * p32 - r + 1  ); 
