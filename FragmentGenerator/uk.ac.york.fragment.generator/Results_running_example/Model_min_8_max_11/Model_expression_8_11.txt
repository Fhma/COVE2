Min_number = ( 8 ) ; Max_number = ( 11 )
In original model number_of_states = ( 15 ); number_of_transition = ( 25 ) 

Original Transition
0 --- 1  -> ((-1)*p11+1)
0 --- 2  -> (p11)
1 --- 2  -> (p12)
1 --- 3  -> ((-1)*p12+1)
2 --- 4  -> (x)
2 --- 9  -> ((-1)*x+1)
3 --- 13  -> (1)
4 --- 5  -> (alpha1)
4 --- 6  -> ((-1)*alpha1+1)
5 --- 7  -> (p21)
5 --- 8  -> ((-1)*p21+1)
6 --- 7  -> (p22)
6 --- 8  -> ((-1)*p22+1)
7 --- 14  -> (1)
8 --- 13  -> (1)
9 --- 10  -> ((-1)*p31+1)
9 --- 12  -> (p31)
10 --- 9  -> ((-1)*r*p32+r)
10 --- 11  -> (r*p32-p32-r+1)
10 --- 12  -> (p32)
11 --- 13  -> (1)
12 --- 0  -> (y)
12 --- 14  -> ((-1)*y+1)
13 --- 13  -> (1)
14 --- 14  -> (1)


In New Model number of states = ( 16 ); number of transition = ( 26 ) 

New transition
0 --- 1  -> ((-1)*p11+1)
0 --- 2  -> (p11)
1 --- 2  -> (p12)
1 --- 3  -> ((-1)*p12+1)
2 --- 4  -> (x)
2 --- 9  -> ((-1)*x+1)
3 --- 13  -> (1)
4 --- 5  -> (alpha1)
4 --- 6  -> ((-1)*alpha1+1)
5 --- 7  -> (p21)
5 --- 8  -> ((-1)*p21+1)
7 --- 14  -> (1)
8 --- 13  -> (1)
9 --- 10  -> ((-1)*p31+1)
9 --- 12  -> (p31)
10 --- 9  -> ((-1)*r*p32+r)
10 --- 11  -> (r*p32-p32-r+1)
10 --- 12  -> (p32)
11 --- 13  -> (1)
12 --- 0  -> (y)
13 --- 13  -> (1)
14 --- 14  -> (1)
12 --- 15  -> ((-1)*y+1)
15 --- 14  -> 1
6 --- 14  -> ( (p22) ) * ( (1) )
6 --- 13  -> ( ((-1)*p22+1) ) * ( (1) )


State--Fragment Number--visited--startingPoint--endingPoint
   0          1          true        true          false
   1          1          true        false          false
   2          1          true        false          false
   3          1          true        false          true
   4          1          true        false          true
   5          4          true        true          false
   6          3          true        true          true
   7          4          true        false          true
   8          4          true        false          true
   9          1          true        false          false
   10          1          true        false          false
   11          1          true        false          true
   12          1          true        false          false
   13          5          true        true          true
   14          6          true        true          true
   15          1          true        false          true

This is transition in Fragment (1) 
    [0, 1]  ((-1)*p11+1)
    [0, 2]  (p11)
    [1, 2]  (p12)
    [1, 3]  ((-1)*p12+1)
    [2, 4]  (x)
    [2, 9]  ((-1)*x+1)
    [9, 10]  ((-1)*p31+1)
    [9, 12]  (p31)
    [10, 9]  ((-1)*r*p32+r)
    [10, 11]  (r*p32-p32-r+1)
    [10, 12]  (p32)
    [12, 0]  (y)
    [12, 15]  ((-1)*y+1)
    [3, 3]  1
    [4, 4]  1
    [11, 11]  1
    [15, 15]  1

This is transition in Fragment (2) 

This is transition in Fragment (3) 
    [6, 6]  1

This is transition in Fragment (4) 
    [5, 7]  (p21)
    [5, 8]  ((-1)*p21+1)
    [7, 7]  1
    [8, 8]  1

This is transition in Fragment (5) 
    [13, 13]  1

This is transition for abstract model 
    [3, 13]  ( (1) ) * ( prob_f1_s3 )
    [4, 5]  ( (alpha1) ) * ( prob_f1_s4 )
    [4, 6]  ( ((-1)*alpha1+1) ) * ( prob_f1_s4 )
    [7, 14]  ( (1) ) * ( prob_f4_s7 )
    [8, 13]  ( (1) ) * ( prob_f4_s8 )
    [11, 13]  ( (1) ) * ( prob_f1_s11 )
    [13, 13]  (1)
    [14, 14]  (1)
    [15, 14]  ( 1 ) * ( prob_f1_s15 )
    [6, 14]  ( (p22) ) * ( (1) )
    [6, 13]  ( ((-1)*p22+1) ) * ( (1) )
r
x
y
alpha1
p12
p11
p21
p22
p32
p31
prob_f1_s3  =(  (-1)* r * p11 * p12 * p31 * p32 + r * p12 * p31 * p32 + r * p11 * p31 * p32 + r * p11 * p12 * p32 + r * p11 * p12 * p31 - r * p31 * p32 - r * p12 * p32 - r * p11 * p32 - r * p12 * p31 - r * p11 * p31 - r * p11 * p12 + r * p32 + r * p31 + p11 * p12 + r * p12 + r * p11 - p12 - p11 - r + 1  ) / ( y * x * p11 * p12 * p31 * p32 - y * p11 * p12 * p31 * p32 - y * x * p12 * p31 * p32 - y * x * p11 * p31 * p32 - y * x * p11 * p12 * p32 - y * x * p11 * p12 * p31 + y * p12 * p31 * p32 + y * p11 * p31 * p32 + y * p11 * p12 * p32 + y * x * p12 * p32 + y * x * p11 * p32 + y * p11 * p12 * p31 + y * x * p12 * p31 + y * x * p11 * p31 - r * p31 * p32 - y * p12 * p32 - y * p11 * p32 - y * p12 * p31 - y * p11 * p31 + r * p32 + r * p31 - r + 1  ); 
prob_f1_s4  =(  x * r * p11 * p12 * p31 * p32 - x * r * p12 * p31 * p32 - x * r * p11 * p31 * p32 - x * r * p11 * p12 * p32 - x * r * p11 * p12 * p31 + x * r * p12 * p32 + x * r * p11 * p32 + x * r * p12 * p31 + x * r * p11 * p31 + x * r * p11 * p12 - x * p11 * p12 - x * r * p12 - x * r * p11 + x * p12 + x * p11 ) / ( y * x * p11 * p12 * p31 * p32 - y * p11 * p12 * p31 * p32 - y * x * p12 * p31 * p32 - y * x * p11 * p31 * p32 - y * x * p11 * p12 * p32 - y * x * p11 * p12 * p31 + y * p12 * p31 * p32 + y * p11 * p31 * p32 + y * p11 * p12 * p32 + y * x * p12 * p32 + y * x * p11 * p32 + y * p11 * p12 * p31 + y * x * p12 * p31 + y * x * p11 * p31 - r * p31 * p32 - y * p12 * p32 - y * p11 * p32 - y * p12 * p31 - y * p11 * p31 + r * p32 + r * p31 - r + 1  ); 
prob_f1_s11  =(  (-1)* x * r * p11 * p12 * p31 * p32 + r * p11 * p12 * p31 * p32 + x * p11 * p12 * p31 * p32 + x * r * p12 * p31 * p32 + x * r * p11 * p31 * p32 + x * r * p11 * p12 * p32 + x * r * p11 * p12 * p31 - p11 * p12 * p31 * p32 - r * p12 * p31 * p32 - x * p12 * p31 * p32 - r * p11 * p31 * p32 - x * p11 * p31 * p32 - r * p11 * p12 * p32 - x * p11 * p12 * p32 - x * r * p12 * p32 - x * r * p11 * p32 - r * p11 * p12 * p31 - x * p11 * p12 * p31 - x * r * p12 * p31 - x * r * p11 * p31 - x * r * p11 * p12 + p12 * p31 * p32 + p11 * p31 * p32 + p11 * p12 * p32 + r * p12 * p32 + x * p12 * p32 + r * p11 * p32 + x * p11 * p32 + p11 * p12 * p31 + r * p12 * p31 + x * p12 * p31 + r * p11 * p31 + x * p11 * p31 + r * p11 * p12 + x * p11 * p12 + x * r * p12 + x * r * p11 - p12 * p32 - p11 * p32 - p12 * p31 - p11 * p31 - p11 * p12 - r * p12 - x * p12 - r * p11 - x * p11 + p12 + p11 ) / ( y * x * p11 * p12 * p31 * p32 - y * p11 * p12 * p31 * p32 - y * x * p12 * p31 * p32 - y * x * p11 * p31 * p32 - y * x * p11 * p12 * p32 - y * x * p11 * p12 * p31 + y * p12 * p31 * p32 + y * p11 * p31 * p32 + y * p11 * p12 * p32 + y * x * p12 * p32 + y * x * p11 * p32 + y * p11 * p12 * p31 + y * x * p12 * p31 + y * x * p11 * p31 - r * p31 * p32 - y * p12 * p32 - y * p11 * p32 - y * p12 * p31 - y * p11 * p31 + r * p32 + r * p31 - r + 1  ); 
prob_f1_s15  =(  y * x * p11 * p12 * p31 * p32 - x * p11 * p12 * p31 * p32 - y * p11 * p12 * p31 * p32 - y * x * p12 * p31 * p32 - y * x * p11 * p31 * p32 - y * x * p11 * p12 * p32 - y * x * p11 * p12 * p31 + p11 * p12 * p31 * p32 + x * p12 * p31 * p32 + y * p12 * p31 * p32 + x * p11 * p31 * p32 + y * p11 * p31 * p32 + x * p11 * p12 * p32 + y * p11 * p12 * p32 + y * x * p12 * p32 + y * x * p11 * p32 + x * p11 * p12 * p31 + y * p11 * p12 * p31 + y * x * p12 * p31 + y * x * p11 * p31 - p12 * p31 * p32 - p11 * p31 * p32 - p11 * p12 * p32 - x * p12 * p32 - y * p12 * p32 - x * p11 * p32 - y * p11 * p32 - p11 * p12 * p31 - x * p12 * p31 - y * p12 * p31 - x * p11 * p31 - y * p11 * p31 + p12 * p32 + p11 * p32 + p12 * p31 + p11 * p31 ) / ( y * x * p11 * p12 * p31 * p32 - y * p11 * p12 * p31 * p32 - y * x * p12 * p31 * p32 - y * x * p11 * p31 * p32 - y * x * p11 * p12 * p32 - y * x * p11 * p12 * p31 + y * p12 * p31 * p32 + y * p11 * p31 * p32 + y * p11 * p12 * p32 + y * x * p12 * p32 + y * x * p11 * p32 + y * p11 * p12 * p31 + y * x * p12 * p31 + y * x * p11 * p31 - r * p31 * p32 - y * p12 * p32 - y * p11 * p32 - y * p12 * p31 - y * p11 * p31 + r * p32 + r * p31 - r + 1  ); 
prob_f4_s7  =(  p21 ); 
prob_f4_s8  =(  (-1)* p21 + 1  ); 
Output_abstract_model =(  (-1)* alpha1 * prob_f1_s4 * prob_f4_s7 * p22 - alpha1 * prob_f4_s8 * prob_f1_s4 * p22 + prob_f1_s4 * prob_f4_s7 * p22 + prob_f4_s8 * prob_f1_s4 * p22 + alpha1 * prob_f1_s4 * prob_f4_s7 + prob_f4_s7 * prob_f1_s15 + prob_f4_s8 * prob_f1_s15 ) / ( prob_f4_s7 * prob_f1_s15 + prob_f4_s8 * prob_f1_s15 + prob_f4_s7 * prob_f1_s11 + prob_f4_s8 * prob_f1_s11 + prob_f1_s4 * prob_f4_s7 + prob_f1_s3 * prob_f4_s7 + prob_f4_s8 * prob_f1_s4 + prob_f4_s8 * prob_f1_s3 ); 
Original_model =(  r * p32 * p31 * p21 * alpha1 * x * p12 * p11 - r * p32 * p31 * p22 * alpha1 * x * p12 * p11 - r * p31 * p21 * alpha1 * x * p12 * p11 - r * p32 * p21 * alpha1 * x * p12 * p11 + r * p31 * p22 * alpha1 * x * p12 * p11 + r * p32 * p22 * alpha1 * x * p12 * p11 + r * p32 * p31 * p22 * x * p12 * p11 - r * p32 * p31 * p21 * alpha1 * x * p11 + r * p32 * p31 * p22 * alpha1 * x * p11 - r * p32 * p31 * p21 * alpha1 * x * p12 + r * p32 * p31 * p22 * alpha1 * x * p12 + r * p21 * alpha1 * x * p12 * p11 - r * p22 * alpha1 * x * p12 * p11 - r * p31 * p22 * x * p12 * p11 - r * p32 * p22 * x * p12 * p11 + y * p32 * p31 * x * p12 * p11 + r * p31 * p21 * alpha1 * x * p11 + r * p32 * p21 * alpha1 * x * p11 - r * p31 * p22 * alpha1 * x * p11 - r * p32 * p22 * alpha1 * x * p11 - r * p32 * p31 * p22 * x * p11 + r * p31 * p21 * alpha1 * x * p12 + r * p32 * p21 * alpha1 * x * p12 - r * p31 * p22 * alpha1 * x * p12 - r * p32 * p22 * alpha1 * x * p12 - r * p32 * p31 * p22 * x * p12 - p21 * alpha1 * x * p12 * p11 + p22 * alpha1 * x * p12 * p11 + r * p22 * x * p12 * p11 - p32 * p31 * x * p12 * p11 - y * p31 * x * p12 * p11 - y * p32 * x * p12 * p11 - y * p32 * p31 * p12 * p11 - r * p21 * alpha1 * x * p11 + r * p22 * alpha1 * x * p11 + r * p31 * p22 * x * p11 + r * p32 * p22 * x * p11 - y * p32 * p31 * x * p11 - r * p21 * alpha1 * x * p12 + r * p22 * alpha1 * x * p12 + r * p31 * p22 * x * p12 + r * p32 * p22 * x * p12 - y * p32 * p31 * x * p12 - p22 * x * p12 * p11 + p31 * x * p12 * p11 + p32 * x * p12 * p11 + p32 * p31 * p12 * p11 + y * p31 * p12 * p11 + y * p32 * p12 * p11 + p21 * alpha1 * x * p11 - p22 * alpha1 * x * p11 - r * p22 * x * p11 + p32 * p31 * x * p11 + y * p31 * x * p11 + y * p32 * x * p11 + y * p32 * p31 * p11 + p21 * alpha1 * x * p12 - p22 * alpha1 * x * p12 - r * p22 * x * p12 + p32 * p31 * x * p12 + y * p31 * x * p12 + y * p32 * x * p12 + y * p32 * p31 * p12 - p31 * p12 * p11 - p32 * p12 * p11 + p22 * x * p11 - p31 * x * p11 - p32 * x * p11 - p32 * p31 * p11 - y * p31 * p11 - y * p32 * p11 + p22 * x * p12 - p31 * x * p12 - p32 * x * p12 - p32 * p31 * p12 - y * p31 * p12 - y * p32 * p12 + p31 * p11 + p32 * p11 + p31 * p12 + p32 * p12 ) / ( y * p32 * p31 * x * p12 * p11 - y * p31 * x * p12 * p11 - y * p32 * x * p12 * p11 - y * p32 * p31 * p12 * p11 - y * p32 * p31 * x * p11 - y * p32 * p31 * x * p12 + y * p31 * p12 * p11 + y * p32 * p12 * p11 + y * p31 * x * p11 + y * p32 * x * p11 + y * p32 * p31 * p11 + y * p31 * x * p12 + y * p32 * x * p12 + y * p32 * p31 * p12 - y * p31 * p11 - y * p32 * p11 - y * p31 * p12 - y * p32 * p12 - r * p32 * p31 + r * p31 + r * p32 - r + 1  ); 
