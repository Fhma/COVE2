Min_number = ( 3 ) ; Max_number = ( 4 )
In original model number_of_states = ( 11 ); number_of_transition = ( 22 ) 

Original Transition
0 --- 1  -> (x)
0 --- 4  -> ((-1)*x+1)
1 --- 2  -> (p11)
1 --- 9  -> ((-1)*p11+1)
2 --- 7  -> (p21)
2 --- 9  -> ((-1)*p21+1)
3 --- 6  -> (p31)
3 --- 9  -> ((-1)*p31+1)
4 --- 8  -> (p41)
4 --- 9  -> ((-1)*p41+1)
5 --- 6  -> (p51)
5 --- 9  -> ((-1)*p51+1)
6 --- 9  -> ((-1)*p61+1)
6 --- 10  -> (p61)
7 --- 1  -> (y2)
7 --- 3  -> ((-1)*y1-y2+1)
7 --- 5  -> (y1)
8 --- 0  -> (z2)
8 --- 4  -> ((-1)*z1-z2+1)
8 --- 5  -> (z1)
9 --- 9  -> (1)
10 --- 10  -> (1)


In New Model number of states = ( 15 ); number of transition = ( 27 ) 

New transition
0 --- 1  -> (x)
0 --- 4  -> ((-1)*x+1)
1 --- 2  -> (p11)
2 --- 7  -> (p21)
3 --- 6  -> (p31)
4 --- 8  -> (p41)
4 --- 9  -> ((-1)*p41+1)
5 --- 9  ->  ((-1)*p51+1) + ( (p51) ) * ( ((-1)*p61+1) ) 
6 --- 9  -> ((-1)*p61+1)
6 --- 10  -> (p61)
7 --- 1  -> (y2)
8 --- 0  -> (z2)
8 --- 5  -> (z1)
9 --- 9  -> (1)
10 --- 10  -> (1)
1 --- 11  -> ((-1)*p11+1)
11 --- 9  -> 1
8 --- 8  -> ( ((-1)*z1-z2+1) ) * ( (p41) )
8 --- 9  -> ( ((-1)*z1-z2+1) ) * ( ((-1)*p41+1) )
7 --- 12  -> ( ((-1)*y1-y2+1) ) + ( (y1) )
12 --- 3  -> ( ((-1)*y1-y2+1) ) / ( ( ((-1)*y1-y2+1) ) + ( (y1) ) )
12 --- 5  -> ( (y1) ) / ( ( ((-1)*y1-y2+1) ) + ( (y1) ) )
2 --- 13  -> ((-1)*p21+1)
13 --- 9  -> 1
3 --- 14  -> ((-1)*p31+1)
14 --- 9  -> 1
5 --- 10  -> ( (p51) ) * ( (p61) )


State--Fragment Number--visited--startingPoint--endingPoint
   0          1          true        true          false
   1          1          true        false          false
   2          1          true        false          false
   3          5          true        true          false
   4          1          true        false          true
   5          4          true        true          true
   6          5          true        false          true
   7          1          true        false          false
   8          3          true        true          true
   9          6          true        true          true
   10          7          true        true          true
   11          1          true        false          true
   12          1          true        false          true
   13          1          true        false          true
   14          5          true        false          true

This is transition in Fragment (1) 
    [0, 1]  (x)
    [0, 4]  ((-1)*x+1)
    [1, 2]  (p11)
    [2, 7]  (p21)
    [7, 1]  (y2)
    [1, 11]  ((-1)*p11+1)
    [7, 12]  ( ((-1)*y1-y2+1) ) + ( (y1) )
    [2, 13]  ((-1)*p21+1)
    [4, 4]  1
    [11, 11]  1
    [12, 12]  1
    [13, 13]  1

This is transition in Fragment (2) 

This is transition in Fragment (3) 
    [8, 8]  1

This is transition in Fragment (4) 
    [5, 5]  1

This is transition in Fragment (5) 
    [3, 6]  (p31)
    [3, 14]  ((-1)*p31+1)
    [6, 6]  1
    [14, 14]  1

This is transition in Fragment (6) 
    [9, 9]  1

This is transition for abstract model 
    [4, 8]  ( (p41) ) * ( prob_f1_s4 )
    [4, 9]  ( ((-1)*p41+1) ) * ( prob_f1_s4 )
    [5, 9]   ((-1)*p51+1) + ( (p51) ) * ( ((-1)*p61+1) ) 
    [6, 9]  ( ((-1)*p61+1) ) * ( prob_f5_s6 )
    [6, 10]  ( (p61) ) * ( prob_f5_s6 )
    [8, 0]  (z2)
    [8, 5]  (z1)
    [9, 9]  (1)
    [10, 10]  (1)
    [11, 9]  ( 1 ) * ( prob_f1_s11 )
    [8, 8]  ( ((-1)*z1-z2+1) ) * ( (p41) )
    [8, 9]  ( ((-1)*z1-z2+1) ) * ( ((-1)*p41+1) )
    [12, 3]  ( ( ((-1)*y1-y2+1) ) / ( ( ((-1)*y1-y2+1) ) + ( (y1) ) ) ) * ( prob_f1_s12 )
    [12, 5]  ( ( (y1) ) / ( ( ((-1)*y1-y2+1) ) + ( (y1) ) ) ) * ( prob_f1_s12 )
    [13, 9]  ( 1 ) * ( prob_f1_s13 )
    [14, 9]  ( 1 ) * ( prob_f5_s14 )
    [5, 10]  ( (p51) ) * ( (p61) )
p51
p61
x
p11
p21
p31
y1
y2
p41
z1
z2
prob_f1_s4  =(  (-1)* x + 1  ); 
prob_f1_s11  =(  x * p11 - x ) / ( p21 * y2 * p11 - 1  ); 
prob_f1_s12  =(  p21 * y2 * x * p11 - p21 * x * p11 ) / ( p21 * y2 * p11 - 1  ); 
prob_f1_s13  =(  p21 * x * p11 - x * p11 ) / ( p21 * y2 * p11 - 1  ); 
prob_f5_s6  =(  p31 ); 
prob_f5_s14  =(  (-1)* p31 + 1  ); 
Output_abstract_model =(  (-1)* z1 * prob_f1_s12 * p41 * p61 * prob_f5_s6 * y1 * p51 - z2 * prob_f1_s12 * p41 * p61 * prob_f5_s6 * y1 * p51 - z1 * prob_f1_s12 * p41 * p61 * prob_f5_s14 * y1 * p51 - z2 * prob_f1_s12 * p41 * p61 * prob_f5_s14 * y1 * p51 + z1 * p41 * p61 * prob_f5_s6 * prob_f1_s4 * y2 * p51 + z1 * p41 * p61 * prob_f5_s14 * prob_f1_s4 * y2 * p51 + prob_f1_s12 * p41 * p61 * prob_f5_s6 * y1 * p51 + prob_f1_s12 * p41 * p61 * prob_f5_s14 * y1 * p51 - z1 * p41 * p61 * prob_f5_s6 * prob_f1_s4 * p51 - z1 * p41 * p61 * prob_f5_s14 * prob_f1_s4 * p51 + z1 * prob_f1_s12 * p41 * p61 * prob_f5_s6 * y1 + z2 * prob_f1_s12 * p41 * p61 * prob_f5_s6 * y1 + z1 * prob_f1_s12 * p41 * p61 * prob_f5_s6 * y2 + z2 * prob_f1_s12 * p41 * p61 * prob_f5_s6 * y2 - prob_f1_s12 * p61 * prob_f5_s6 * y1 * p51 - prob_f1_s12 * p61 * prob_f5_s14 * y1 * p51 - prob_f1_s12 * p41 * p61 * prob_f5_s6 * y1 - prob_f1_s12 * p41 * p61 * prob_f5_s6 * y2 - z1 * prob_f1_s12 * p41 * p61 * prob_f5_s6 - z2 * prob_f1_s12 * p41 * p61 * prob_f5_s6 + prob_f1_s12 * p61 * prob_f5_s6 * y1 + prob_f1_s12 * p61 * prob_f5_s6 * y2 + prob_f1_s12 * p41 * p61 * prob_f5_s6 - prob_f1_s12 * p61 * prob_f5_s6 ) / ( z1 * p41 * prob_f5_s6 * prob_f1_s4 * y2 + z1 * p41 * prob_f5_s14 * prob_f1_s4 * y2 + z1 * prob_f1_s13 * p41 * prob_f5_s6 * y2 + z2 * prob_f1_s13 * p41 * prob_f5_s6 * y2 + z1 * prob_f1_s12 * p41 * prob_f5_s6 * y2 + z2 * prob_f1_s12 * p41 * prob_f5_s6 * y2 + z1 * prob_f1_s11 * p41 * prob_f5_s6 * y2 + z2 * prob_f1_s11 * p41 * prob_f5_s6 * y2 + z1 * prob_f1_s13 * p41 * prob_f5_s14 * y2 + z2 * prob_f1_s13 * p41 * prob_f5_s14 * y2 + z1 * prob_f1_s12 * p41 * prob_f5_s14 * y2 + z2 * prob_f1_s12 * p41 * prob_f5_s14 * y2 + z1 * prob_f1_s11 * p41 * prob_f5_s14 * y2 + z2 * prob_f1_s11 * p41 * prob_f5_s14 * y2 - p41 * prob_f5_s6 * prob_f1_s4 * y2 - p41 * prob_f5_s14 * prob_f1_s4 * y2 - prob_f1_s13 * p41 * prob_f5_s6 * y2 - prob_f1_s12 * p41 * prob_f5_s6 * y2 - prob_f1_s11 * p41 * prob_f5_s6 * y2 - prob_f1_s13 * p41 * prob_f5_s14 * y2 - prob_f1_s12 * p41 * prob_f5_s14 * y2 - prob_f1_s11 * p41 * prob_f5_s14 * y2 - z1 * p41 * prob_f5_s6 * prob_f1_s4 - z1 * p41 * prob_f5_s14 * prob_f1_s4 - z1 * prob_f1_s13 * p41 * prob_f5_s6 - z2 * prob_f1_s13 * p41 * prob_f5_s6 - z1 * prob_f1_s12 * p41 * prob_f5_s6 - z2 * prob_f1_s12 * p41 * prob_f5_s6 - z1 * prob_f1_s11 * p41 * prob_f5_s6 - z2 * prob_f1_s11 * p41 * prob_f5_s6 - z1 * prob_f1_s13 * p41 * prob_f5_s14 - z2 * prob_f1_s13 * p41 * prob_f5_s14 - z1 * prob_f1_s12 * p41 * prob_f5_s14 - z2 * prob_f1_s12 * p41 * prob_f5_s14 - z1 * prob_f1_s11 * p41 * prob_f5_s14 - z2 * prob_f1_s11 * p41 * prob_f5_s14 + prob_f5_s6 * prob_f1_s4 * y2 + prob_f5_s14 * prob_f1_s4 * y2 + prob_f1_s13 * prob_f5_s6 * y2 + prob_f1_s12 * prob_f5_s6 * y2 + prob_f1_s11 * prob_f5_s6 * y2 + prob_f1_s13 * prob_f5_s14 * y2 + prob_f1_s12 * prob_f5_s14 * y2 + prob_f1_s11 * prob_f5_s14 * y2 + p41 * prob_f5_s6 * prob_f1_s4 + p41 * prob_f5_s14 * prob_f1_s4 + prob_f1_s13 * p41 * prob_f5_s6 + prob_f1_s12 * p41 * prob_f5_s6 + prob_f1_s11 * p41 * prob_f5_s6 + prob_f1_s13 * p41 * prob_f5_s14 + prob_f1_s12 * p41 * prob_f5_s14 + prob_f1_s11 * p41 * prob_f5_s14 - prob_f5_s6 * prob_f1_s4 - prob_f5_s14 * prob_f1_s4 - prob_f1_s13 * prob_f5_s6 - prob_f1_s12 * prob_f5_s6 - prob_f1_s11 * prob_f5_s6 - prob_f1_s13 * prob_f5_s14 - prob_f1_s12 * prob_f5_s14 - prob_f1_s11 * prob_f5_s14 ); 
Original_model =(  p61 * p41 * p31 * p21 * p11 * z1 * y1 * x - p61 * p51 * p41 * p21 * p11 * z1 * y1 * x + p61 * p41 * p31 * p21 * p11 * z2 * y1 * x - p61 * p51 * p41 * p21 * p11 * z2 * y1 * x + p61 * p41 * p31 * p21 * p11 * z1 * y2 * x - p61 * p51 * p41 * p21 * p11 * z1 * y2 * x + p61 * p41 * p31 * p21 * p11 * z2 * y2 * x - p61 * p41 * p31 * p21 * p11 * y1 * x + p61 * p51 * p41 * p21 * p11 * y1 * x - p61 * p41 * p31 * p21 * p11 * y2 * x - p61 * p41 * p31 * p21 * p11 * z1 * x - p61 * p41 * p31 * p21 * p11 * z2 * x + p61 * p51 * p41 * p21 * p11 * z1 * y2 + p61 * p31 * p21 * p11 * y1 * x - p61 * p51 * p21 * p11 * y1 * x + p61 * p31 * p21 * p11 * y2 * x + p61 * p41 * p31 * p21 * p11 * x + p61 * p51 * p41 * z1 * x - p61 * p31 * p21 * p11 * x - p61 * p51 * p41 * z1 ) / ( p41 * p21 * p11 * z2 * y2 * x + p41 * p21 * p11 * z1 * y2 - p41 * p21 * p11 * y2 - p41 * z2 * x + p21 * p11 * y2 - p41 * z1 + p41 - 1  ); 
